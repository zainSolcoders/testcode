{"version":3,"file":"extension.js","sources":["../../../../src/cli/prompts/scaffold/extension.ts","../../../../src/cli/services/scaffold/extension.ts","../../../../src/cli/commands/app/scaffold/extension.ts"],"sourcesContent":["import {extensions, ExtensionTypes} from '../../constants'\nimport {ui} from '@shopify/cli-kit'\n\ninterface ScaffoldExtensionOptions {\n  name?: string\n  extensionType?: string\n  extensionTypesAlreadyAtQuota: string[]\n}\n\ninterface ScaffoldExtensionOutput {\n  name: string\n  extensionType: ExtensionTypes\n}\n\nconst scaffoldExtensionPrompt = async (\n  options: ScaffoldExtensionOptions,\n  prompt = ui.prompt,\n): Promise<ScaffoldExtensionOutput> => {\n  const questions: ui.Question[] = []\n  if (!options.extensionType) {\n    questions.push({\n      type: 'select',\n      name: 'extensionType',\n      message: 'Type of extension?',\n      choices: extensions.types.filter((type) => !options.extensionTypesAlreadyAtQuota.includes(type)),\n    })\n  }\n  if (!options.name) {\n    questions.push({\n      type: 'input',\n      name: 'name',\n      message: \"Your extension's working name?\",\n      default: 'extension',\n    })\n  }\n  const promptOutput: ScaffoldExtensionOutput = await prompt(questions)\n  return {...options, ...promptOutput}\n}\n\nexport default scaffoldExtensionPrompt\n","import {runGoExtensionsCLI} from '../../utilities/extensions/cli'\nimport {\n  blocks,\n  extensionTypeCategory,\n  ExtensionTypes,\n  FunctionExtensionTypes,\n  getUIExtensionRendererDependency,\n  ThemeExtensionTypes,\n  UIExtensionTypes,\n} from '../../constants'\nimport {App} from '../../models/app/app'\nimport {error, file, git, path, string, template, ui, yaml, environment, dependency} from '@shopify/cli-kit'\nimport {fileURLToPath} from 'url'\nimport stream from 'node:stream'\n\nasync function getTemplatePath(name: string): Promise<string> {\n  const templatePath = await path.findUp(`templates/${name}`, {\n    cwd: path.dirname(fileURLToPath(import.meta.url)),\n    type: 'directory',\n  })\n  if (templatePath) {\n    return templatePath\n  } else {\n    throw new error.Bug(`Couldn't find the template ${name} in @shopify/app.`)\n  }\n}\n\ninterface ExtensionInitOptions<TExtensionTypes extends ExtensionTypes = ExtensionTypes> {\n  name: string\n  extensionType: TExtensionTypes\n  app: App\n  cloneUrl?: string\n  language?: string\n}\n\ntype FunctionExtensionInitOptions = ExtensionInitOptions<FunctionExtensionTypes>\ntype UIExtensionInitOptions = ExtensionInitOptions<UIExtensionTypes>\ntype ThemeExtensionInitOptions = ExtensionInitOptions<ThemeExtensionTypes>\n\nasync function extensionInit(options: ExtensionInitOptions) {\n  switch (extensionTypeCategory(options.extensionType)) {\n    case 'theme':\n      await themeExtensionInit(options as ThemeExtensionInitOptions)\n      break\n    case 'function':\n      await functionExtensionInit(options as FunctionExtensionInitOptions)\n      break\n    case 'ui':\n      await uiExtensionInit(options as UIExtensionInitOptions)\n      break\n  }\n}\n\nasync function themeExtensionInit({name, app, extensionType}: ThemeExtensionInitOptions) {\n  const extensionDirectory = await ensureExtensionDirectoryExists({app, name})\n  const templatePath = await getTemplatePath('theme-extension')\n  await template.recursiveDirectoryCopy(templatePath, extensionDirectory, {name, extensionType})\n}\n\nasync function uiExtensionInit({name, extensionType, app}: UIExtensionInitOptions) {\n  const extensionDirectory = await ensureExtensionDirectoryExists({app, name})\n  const list = new ui.Listr(\n    [\n      {\n        title: 'Installing additional dependencies',\n        task: async (_, task) => {\n          const requiredDependencies = getRuntimeDependencies({extensionType})\n          await dependency.addNPMDependenciesIfNeeded(requiredDependencies, {\n            dependencyManager: app.dependencyManager,\n            type: 'prod',\n            directory: app.directory,\n            stderr: new stream.Writable({\n              write(chunk, encoding, next) {\n                task.output = chunk.toString()\n                next()\n              },\n            }),\n            stdout: new stream.Writable({\n              write(chunk, encoding, next) {\n                task.output = chunk.toString()\n                next()\n              },\n            }),\n          })\n          task.title = 'Dependencies installed'\n        },\n      },\n      {\n        title: 'Scaffolding extension',\n        task: async (_, task) => {\n          const stdin = yaml.encode({\n            extensions: [\n              {\n                title: name,\n                // Use the new templates\n                type: `${extensionType}_next`,\n                metafields: [],\n                development: {\n                  // eslint-disable-next-line @typescript-eslint/naming-convention\n                  root_dir: '.',\n                },\n              },\n            ],\n          })\n          await runGoExtensionsCLI(['create', '-'], {\n            cwd: extensionDirectory,\n            stderr: new stream.Writable({\n              write(chunk, encoding, next) {\n                task.output = chunk.toString()\n                next()\n              },\n            }),\n            stdout: new stream.Writable({\n              write(chunk, encoding, next) {\n                task.output = chunk.toString()\n                next()\n              },\n            }),\n            stdin,\n          })\n        },\n      },\n    ],\n    {rendererSilent: environment.local.isUnitTest()},\n  )\n  await list.run()\n}\n\nexport function getRuntimeDependencies({extensionType}: Pick<UIExtensionInitOptions, 'extensionType'>): string[] {\n  switch (extensionType) {\n    case 'product_subscription':\n    case 'checkout_ui_extension':\n    case 'checkout_post_purchase': {\n      const dependencies = ['react']\n      const rendererDependency = getUIExtensionRendererDependency(extensionType)\n      if (rendererDependency) {\n        dependencies.push(rendererDependency)\n      }\n      return dependencies\n    }\n    case 'beacon_extension':\n      return []\n  }\n}\n\nasync function functionExtensionInit(options: FunctionExtensionInitOptions) {\n  const extensionDirectory = await ensureExtensionDirectoryExists(options)\n  const url = options.cloneUrl || blocks.functions.defaultUrl\n  await file.inTemporaryDirectory(async (tmpDir) => {\n    const templateDownloadDir = path.join(tmpDir, 'download')\n\n    const list = new ui.Listr(\n      [\n        {\n          title: 'Scaffolding extension',\n          task: async () => {\n            await file.mkdir(templateDownloadDir)\n            await git.downloadRepository({repoUrl: url, destination: templateDownloadDir})\n            const origin = path.join(templateDownloadDir, functionTemplatePath(options))\n            template.recursiveDirectoryCopy(origin, extensionDirectory, options)\n          },\n        },\n      ],\n      {rendererSilent: environment.local.isUnitTest()},\n    )\n    await list.run()\n  })\n}\n\nfunction functionTemplatePath({extensionType, language}: FunctionExtensionInitOptions): string {\n  const lang = language || blocks.functions.defaultLanguage\n  switch (extensionType) {\n    case 'product_discounts':\n      return `discounts/${lang}/product-discounts/default`\n    case 'order_discounts':\n      return `discounts/${lang}/order-discounts/default`\n    case 'shipping_discounts':\n      return `discounts/${lang}/shipping-discounts/default`\n    case 'payment_methods':\n      return `checkout/${lang}/payment-methods/default`\n    case 'shipping_rate_presenter':\n      return `checkout/${lang}/shipping-rate-presenter/default`\n  }\n}\n\nasync function ensureExtensionDirectoryExists({name, app}: {name: string; app: App}) {\n  const hyphenizedName = string.hyphenize(name)\n  const extensionDirectory = path.join(app.directory, blocks.extensions.directoryName, hyphenizedName)\n  if (await file.exists(extensionDirectory)) {\n    throw new error.Abort(`Extension ${hyphenizedName} already exists!`)\n  }\n  await file.mkdir(extensionDirectory)\n  return extensionDirectory\n}\n\nexport default extensionInit\n","import {appFlags} from '../../../flags'\nimport {extensions, limitedExtensions} from '../../../constants'\nimport scaffoldExtensionPrompt from '../../../prompts/scaffold/extension'\nimport {load as loadApp, App} from '../../../models/app/app'\nimport scaffoldExtensionService from '../../../services/scaffold/extension'\nimport {output, path, cli, error} from '@shopify/cli-kit'\nimport {Command, Flags} from '@oclif/core'\n\nexport default class AppScaffoldExtension extends Command {\n  static description = 'Scaffold an Extension'\n  static examples = ['<%= config.bin %> <%= command.id %>']\n\n  static flags = {\n    ...cli.globalFlags,\n    ...appFlags,\n    type: Flags.string({\n      char: 't',\n      hidden: false,\n      description: 'Extension type',\n      options: extensions.types,\n      env: 'SHOPIFY_FLAG_EXTENSION_TYPE',\n    }),\n    name: Flags.string({\n      char: 'n',\n      hidden: false,\n      description: 'name of your Extension',\n      env: 'SHOPIFY_FLAG_NAME',\n    }),\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    'clone-url': Flags.string({\n      hidden: true,\n      char: 'u',\n      description:\n        'The Git URL to clone the function extensions templates from. Defaults to: https://github.com/Shopify/scripts-apis-examples',\n      env: 'SHOPIFY_FLAG_CLONE_URL',\n    }),\n    language: Flags.string({\n      hidden: true,\n      char: 'l',\n      options: ['wasm', 'rust', 'typescript'],\n      description: 'Language of the template',\n      env: 'SHOPIFY_FLAG_LANGUAGE',\n    }),\n  }\n\n  static args = [{name: 'file'}]\n\n  public async run(): Promise<void> {\n    const {flags} = await this.parse(AppScaffoldExtension)\n    const directory = flags.path ? path.resolve(flags.path) : process.cwd()\n    const app: App = await loadApp(directory)\n\n    this.validateType(app, flags.type)\n\n    const promptAnswers = await scaffoldExtensionPrompt({\n      extensionType: flags.type,\n      extensionTypesAlreadyAtQuota: this.limitedExtensionsAlreadyScaffolded(app),\n      name: flags.name,\n    })\n\n    await scaffoldExtensionService({\n      ...promptAnswers,\n      app,\n      cloneUrl: flags['clone-url'],\n      language: flags.language,\n    })\n    output.info(output.content`Extension ${promptAnswers.name} generated successfully!`)\n  }\n\n  /**\n   * If the type passed as flag is not valid because it has already been scaffolded\n   * and we don't allow multiple extensions of that type, throw an error\n   * @param app {App} current App\n   * @param type {string} extension type\n   */\n  validateType(app: App, type: string | undefined) {\n    if (type && this.limitedExtensionsAlreadyScaffolded(app).includes(type)) {\n      throw new error.Abort('Invalid extension type', `You can only scaffold one extension of type ${type} per app`)\n    }\n  }\n\n  /**\n   * Some extension types like `theme` and `product_subscription` are limited to one per app\n   * Use this method to retrieve a list of the limited types that have already been scaffolded\n   *\n   * @param app {App} current App\n   * @returns {string[]} list of extensions that are limited by quantity and are already scaffolded\n   */\n  limitedExtensionsAlreadyScaffolded(app: App): string[] {\n    const themeTypes = app.extensions.theme.map((ext) => ext.configuration.type)\n    const uiTypes = app.extensions.ui.map((ext) => ext.configuration.type)\n\n    const themeExtensions = themeTypes.filter((type) => limitedExtensions.theme.includes(type))\n    const uiExtensions = uiTypes.filter((type) => limitedExtensions.ui.includes(type))\n    return [...themeExtensions, ...uiExtensions]\n  }\n}\n"],"names":["loadApp","scaffoldExtensionService"],"mappings":"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"}