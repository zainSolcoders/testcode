import { a as appFlags, l as load } from '../../app-e1e50846.js';
import { b as buildExtension } from '../../extension-54b7397f.js';
import { temporary, path, file, output, archiver, session, id, http, api, error, cli } from '@shopify/cli-kit';
import fs from 'fs';
import { e as ensureDeployEnvironment } from '../../environment-52fb1530.js';
import { Command } from '@oclif/core';
import '../../cli-852b5950.js';
import 'node:zlib';
import 'node:fs';
import 'node:stream';
import 'node:util';
import 'url';
import '../../configuration-a702715b.js';

async function bundle(options) {
  await temporary.directory(async (tmpDir) => {
    const bundleDirectory = path.join(tmpDir, "bundle");
    await file.mkdir(bundleDirectory);
    await output.concurrent([
      {
        prefix: "extensions",
        action: async (stdout, stderr, signal) => {
          await buildExtension({ app: options.app, extensions: options.app.extensions.ui, stdout, stderr, signal });
        }
      }
    ]);
    output.newline();
    output.success(`${options.app.name} built`);
    await archiver.zip(bundleDirectory, options.bundlePath);
  });
}

async function upload(options) {
  const token = await session.ensureAuthenticatedPartners();
  const deploymentUUID = id.generateRandomUUID();
  const signedURL = await generateUrl(options.apiKey, deploymentUUID);
  const formData = http.formData();
  const buffer = fs.readFileSync(options.bundlePath);
  formData.append("my_upload", buffer);
  await http.fetch(signedURL, {
    method: "put",
    body: buffer,
    headers: formData.getHeaders()
  });
  const variables = {
    apiKey: options.apiKey,
    uuid: deploymentUUID,
    bundleUrl: signedURL
  };
  const mutation = api.graphql.CreateDeployment;
  const result = await api.partners.request(mutation, token, variables);
  if (result.deploymentCreate && result.deploymentCreate.userErrors && result.deploymentCreate.userErrors.length > 0) {
    const errors = result.deploymentCreate.userErrors.map((error2) => error2.message).join(", ");
    throw new error.Abort(errors);
  }
}
async function generateUrl(apiKey, deploymentUUID) {
  const mutation = api.graphql.GenerateSignedUploadUrl;
  const token = await session.ensureAuthenticatedPartners();
  const variables = {
    apiKey,
    deploymentUuid: deploymentUUID,
    bundleFormat: 1
  };
  const result = await api.partners.request(mutation, token, variables);
  if (result.deploymentGenerateSignedUploadUrl && result.deploymentGenerateSignedUploadUrl.userErrors && result.deploymentGenerateSignedUploadUrl.userErrors.length > 0) {
    const errors = result.deploymentGenerateSignedUploadUrl.userErrors.map((error2) => error2.message).join(", ");
    throw new error.Abort(errors);
  }
  return result.deploymentGenerateSignedUploadUrl.signedUploadUrl;
}

const deploy = async (options) => {
  const { app, identifiers } = await ensureDeployEnvironment({ app: options.app });
  const apiKey = identifiers.app;
  output.newline();
  output.info("Pushing your code to Shopify...");
  output.newline();
  output.success(`${app.name} deployed to Shopify Partners`);
  await temporary.directory(async (tmpDir) => {
    const bundlePath = path.join(tmpDir, `${app.name}.zip`);
    await bundle({ app, bundlePath });
    await upload({ apiKey, bundlePath });
    output.newline();
    output.info("Summary");
    app.extensions.ui.forEach((extension) => {
      output.info(output.content`${output.token.magenta("\u2714")} ${path.basename(extension.directory)} is deployed to Shopify but not yet live`);
    });
  });
};

const _Deploy = class extends Command {
  async run() {
    const { args, flags } = await this.parse(_Deploy);
    const directory = flags.path ? path.resolve(flags.path) : process.cwd();
    const app = await load(directory);
    await deploy({ app });
  }
};
let Deploy = _Deploy;
Deploy.description = "Deploy your Shopify app";
Deploy.flags = {
  ...cli.globalFlags,
  ...appFlags
};

export { Deploy as default };
//# sourceMappingURL=deploy.js.map
