{"version":3,"file":"info.js","sources":["../../../src/cli/services/info.ts","../../../src/cli/commands/app/info.ts"],"sourcesContent":["import {App, FunctionExtension, ThemeExtension, UIExtension} from '../models/app/app'\nimport {configurationFileNames, functionExtensions, themeExtensions, uiExtensions} from '../constants'\nimport {os, output, path, store} from '@shopify/cli-kit'\n\nexport type Format = 'json' | 'text'\ninterface InfoOptions {\n  format: Format\n}\ninterface Configurable {\n  configuration?: {type?: string}\n}\n\nexport function info(app: App, {format}: InfoOptions): output.Message {\n  if (format === 'json') {\n    return output.content`${JSON.stringify(app, null, 2)}`\n  } else {\n    const appInfo = new AppInfo(app)\n    return appInfo.output()\n  }\n}\n\nclass AppInfo {\n  private app: App\n  private cachedAppInfo: store.CachedAppInfo | undefined\n\n  constructor(app: App) {\n    this.app = app\n    this.cachedAppInfo = store.getAppInfo(app.directory)\n  }\n\n  output(): string {\n    const sections: [string, string][] = [\n      this.devConfigsSection(),\n      this.projectSettingsSection(),\n      this.appComponentsSection(),\n      this.accessScopesSection(),\n      this.systemInfoSection(),\n    ]\n    return sections.map((sectionContents: [string, string]) => this.section(...sectionContents)).join('\\n\\n')\n  }\n\n  devConfigsSection(): [string, string] {\n    const title = 'Configs for Dev'\n\n    let storeDescription = 'not configured'\n    if (this.cachedAppInfo) {\n      const storeInfo = store.getAppInfo(this.app.directory)\n      if (storeInfo && storeInfo.storeFqdn) storeDescription = storeInfo.storeFqdn\n    }\n    const lines = [\n      ['App', this.app.name],\n      ['Dev store', storeDescription],\n    ]\n    const postscript = output.content`ðŸ’¡ To change these, run ${output.token.command(\n      this.app.dependencyManager,\n      'shopify dev',\n      '--reset',\n    )}`.value\n    return [title, `${this.linesToColumns(lines)}\\n\\n${postscript}`]\n  }\n\n  projectSettingsSection(): [string, string] {\n    const title = 'Your Project'\n    const lines = [\n      ['Name', this.app.name],\n      ['API key', this.cachedAppInfo?.appId || 'not configured'],\n      ['Root location', this.app.directory],\n    ]\n    return [title, this.linesToColumns(lines)]\n  }\n\n  appComponentsSection(): [string, string] {\n    const title = 'Directory Components'\n\n    let body = `\\n${this.webComponentsSection()}`\n\n    function augmentWithExtensions<TExtension extends Configurable>(\n      extensionTypes: ReadonlyArray<string>,\n      extensions: TExtension[],\n      outputFormatter: (extension: TExtension) => string,\n    ) {\n      extensionTypes.forEach((extensionType: string) => {\n        const relevantExtensions = extensions.filter((extension: TExtension) => {\n          const configurationType = extension.configuration && extension.configuration.type\n          return configurationType === extensionType\n        })\n        if (relevantExtensions[0]) {\n          body += `\\n\\n${output.content`${output.token.subheading(extensionType)}`.value}`\n          relevantExtensions.forEach((extension: TExtension) => {\n            body += `${outputFormatter(extension)}`\n          })\n        }\n      })\n    }\n    augmentWithExtensions(uiExtensions.types, this.app.extensions.ui, this.uiExtensionSubSection.bind(this))\n    augmentWithExtensions(themeExtensions.types, this.app.extensions.theme, this.themeExtensionSubSection.bind(this))\n    augmentWithExtensions(\n      functionExtensions.types,\n      this.app.extensions.function,\n      this.functionExtensionSubSection.bind(this),\n    )\n\n    const invalidExtensions = Object.values(this.app.extensions)\n      .flat()\n      .filter((extension) => !extension.configuration || !extension.configuration.type)\n    if (invalidExtensions[0]) {\n      body += `\\n\\n${output.content`${output.token.subheading('Invalid Extensions')}`.value}`\n      invalidExtensions.forEach((extension) => {\n        body += `${this.invalidExtensionSubSection(extension)}`\n      })\n    }\n\n    return [title, body]\n  }\n\n  webComponentsSection(): string {\n    const errors: string[] = []\n    const subtitle = [output.content`${output.token.subheading('web app')}`.value]\n    const toplevel = ['ðŸ“‚ webs', '']\n    const sublevels: [string, string][] = []\n    this.app.webs.forEach((web) => {\n      if (web.configuration && web.configuration.type) {\n        sublevels.push([`  ðŸ“‚ ${web.configuration.type}`, path.relative(this.app.directory, web.directory)])\n      } else if (this.app.errors) {\n        const error = this.app.errors.getError(`${web.directory}/${configurationFileNames.web}`)\n        if (error) errors.push(error)\n      }\n    })\n    if (errors[0]) {\n      const errorHeadline = errors.length === 1 ? 'validation error' : 'validation errors'\n      const firstError: string = errors.shift()!\n      const [errorFirstLine, ...errorRemainingLines] = firstError.split('\\n')\n      errors.forEach((error) => error.split('\\n').forEach((line) => errorRemainingLines.push(line)))\n\n      sublevels.push([this.errorText(errorHeadline), this.errorText(errorFirstLine)])\n      errorRemainingLines.forEach((line) => sublevels.push(['', this.errorText(line)]))\n    }\n\n    return `${subtitle}\\n${this.linesToColumns([toplevel, ...sublevels])}`\n  }\n\n  uiExtensionSubSection(extension: UIExtension): string {\n    const config = extension.configuration\n    const details = [\n      [`ðŸ“‚ ${config.name}`, path.relative(this.app.directory, extension.directory)],\n      ['     config file', path.relative(extension.directory, extension.configurationPath)],\n      ['     metafields', config ? `${config.metafields.length}` : 'configuration invalid'],\n    ]\n\n    return `\\n${this.linesToColumns(details)}`\n  }\n\n  functionExtensionSubSection(extension: FunctionExtension): string {\n    const config = extension.configuration\n    const details = [\n      [`ðŸ“‚ ${config.name}`, path.relative(this.app.directory, extension.directory)],\n      ['     config file', path.relative(extension.directory, extension.configurationPath)],\n    ]\n\n    return `\\n${this.linesToColumns(details)}`\n  }\n\n  themeExtensionSubSection(extension: ThemeExtension): string {\n    const config = extension.configuration\n    const details = [\n      [`ðŸ“‚ ${config.name}`, path.relative(this.app.directory, extension.directory)],\n      ['     config file', path.relative(extension.directory, extension.configurationPath)],\n    ]\n\n    return `\\n${this.linesToColumns(details)}`\n  }\n\n  invalidExtensionSubSection(extension: UIExtension | FunctionExtension | ThemeExtension) {\n    const [errorFirstLine, ...errorRemainingLines] = this.app.errors!.getError(extension.configurationPath).split('\\n')\n    const details = [\n      [`ðŸ“‚ extension root directory`, path.relative(this.app.directory, extension.directory)],\n      ['     config file', path.relative(extension.directory, extension.configurationPath)],\n      ['     validation error', errorFirstLine].map(this.errorText),\n      ...errorRemainingLines.map((line) => ['', line].map(this.errorText)),\n    ]\n\n    return `\\n${this.linesToColumns(details)}`\n  }\n\n  errorText(str: string): string {\n    return output.content`${output.token.errorText(str)}`.value\n  }\n\n  accessScopesSection(): [string, string] {\n    const title = 'Access Scopes in Root TOML File'\n    const lines = this.app.configuration.scopes.split(',').map((scope) => [scope])\n    return [title, this.linesToColumns(lines)]\n  }\n\n  systemInfoSection(): [string, string] {\n    const title = 'Tooling and System'\n    const {platform, arch} = os.platformAndArch()\n    const lines: string[][] = [\n      ['Shopify CLI', this.app.nodeDependencies['@shopify/cli']],\n      ['Package manager', this.app.dependencyManager],\n      ['OS', `${platform}-${arch}`],\n      ['Shell', process.env.SHELL || 'unknown'],\n      ['Node version', process.version],\n    ]\n    const updateCommand = this.app.dependencyManager === 'yarn' ? 'upgrade' : 'update'\n    const postscript =\n      output.content`ðŸ’¡ To update to the latest version of the Shopify CLI, run ${output.token.genericShellCommand(\n        `${this.app.dependencyManager} ${updateCommand}`,\n      )}`.value\n    return [title, `${this.linesToColumns(lines)}\\n\\n${postscript}`]\n  }\n\n  linesToColumns(lines: string[][]): string {\n    const widths: number[] = []\n    for (let i = 0; i < lines[0].length; i++) {\n      const columnRows = lines.map((line) => line[i])\n      widths.push(Math.max(...columnRows.map((row) => output.unstyled(row).length)))\n    }\n    const paddedLines = lines\n      .map((line) => {\n        return line\n          .map((col, index) => {\n            return `${col}${' '.repeat(widths[index] - output.unstyled(col).length)}`\n          })\n          .join('   ')\n          .trimEnd()\n      })\n      .join('\\n')\n    return paddedLines\n  }\n\n  section(title: string, body: string): string {\n    const formattedTitle = `${title.toUpperCase()}${' '.repeat(35 - title.length)}`\n    return output.content`${output.token.heading(formattedTitle)}\\n${body}`.value\n  }\n}\n","import {appFlags} from '../../flags'\nimport {load as loadApp, App} from '../../models/app/app'\nimport {Format, info} from '../../services/info'\nimport {Command, Flags} from '@oclif/core'\nimport {output, path, cli} from '@shopify/cli-kit'\n\nexport default class AppInfo extends Command {\n  static description = 'Print basic information about your app and blocks'\n\n  static flags = {\n    ...cli.globalFlags,\n    ...appFlags,\n    format: Flags.string({\n      hidden: false,\n      char: 'f',\n      description: 'output format',\n      options: ['json', 'text'],\n      default: 'text',\n      env: 'SHOPIFY_FLAG_FORMAT',\n    }),\n  }\n\n  public async run(): Promise<void> {\n    const {flags} = await this.parse(AppInfo)\n    const directory = flags.path ? path.resolve(flags.path) : process.cwd()\n    const app: App = await loadApp(directory, 'report')\n    output.info(info(app, {format: flags.format as Format}))\n    if (app.errors) process.exit(2)\n  }\n}\n"],"names":["AppInfo","loadApp"],"mappings":";;;;AAYqB,SAAA,IAAA,CAAA,GAAA,EAAU,EAAC,MAAsC,EAAA,EAAA;AACpE,EAAA,IAAI,WAAW,MAAQ,EAAA;AACrB,IAAA,OAAO,OAAO,OAAU,CAAA,EAAA,IAAA,CAAK,SAAU,CAAA,GAAA,EAAK,MAAM,CAAC,CAAA,CAAA,CAAA,CAAA;AAAA,GAC9C,MAAA;AACL,IAAM,MAAA,OAAA,GAAU,IAAIA,SAAA,CAAQ,GAAG,CAAA,CAAA;AAC/B,IAAA,OAAO,QAAQ,MAAO,EAAA,CAAA;AAAA,GACxB;AACF,CAAA;AAEA,MAAMA,SAAQ,CAAA;AAAA,EAIZ,YAAY,GAAU,EAAA;AACpB,IAAA,IAAA,CAAK,GAAM,GAAA,GAAA,CAAA;AACX,IAAA,IAAA,CAAK,aAAgB,GAAA,KAAA,CAAM,UAAW,CAAA,GAAA,CAAI,SAAS,CAAA,CAAA;AAAA,GACrD;AAAA,EAEA,MAAiB,GAAA;AACf,IAAA,MAAM,QAA+B,GAAA;AAAA,MACnC,KAAK,iBAAkB,EAAA;AAAA,MACvB,KAAK,sBAAuB,EAAA;AAAA,MAC5B,KAAK,oBAAqB,EAAA;AAAA,MAC1B,KAAK,mBAAoB,EAAA;AAAA,MACzB,KAAK,iBAAkB,EAAA;AAAA,KACzB,CAAA;AACA,IAAO,OAAA,QAAA,CAAS,GAAI,CAAA,CAAC,eAAsC,KAAA,IAAA,CAAK,OAAQ,CAAA,GAAG,eAAe,CAAC,CAAE,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAAA,GAC1G;AAAA,EAEA,iBAAsC,GAAA;AACpC,IAAA,MAAM,KAAQ,GAAA,iBAAA,CAAA;AAEd,IAAA,IAAI,gBAAmB,GAAA,gBAAA,CAAA;AACvB,IAAA,IAAI,KAAK,aAAe,EAAA;AACtB,MAAA,MAAM,SAAY,GAAA,KAAA,CAAM,UAAW,CAAA,IAAA,CAAK,IAAI,SAAS,CAAA,CAAA;AACrD,MAAA,IAAI,aAAa,SAAU,CAAA,SAAA;AAAW,QAAA,gBAAA,GAAmB,SAAU,CAAA,SAAA,CAAA;AAAA,KACrE;AACA,IAAA,MAAM,KAAQ,GAAA;AAAA,MACZ,CAAC,KAAA,EAAO,IAAK,CAAA,GAAA,CAAI,IAAI,CAAA;AAAA,MACrB,CAAC,aAAa,gBAAgB,CAAA;AAAA,KAChC,CAAA;AACA,IAAM,MAAA,UAAA,GAAa,MAAO,CAAA,OAAA,CAAA,wBAAA,EAAkC,MAAO,CAAA,KAAA,CAAM,OACvE,CAAA,IAAA,CAAK,GAAI,CAAA,iBAAA,EACT,aACA,EAAA,SACF,CAAI,CAAA,CAAA,CAAA,KAAA,CAAA;AACJ,IAAA,OAAO,CAAC,KAAA,EAAO,CAAG,EAAA,IAAA,CAAK,eAAe,KAAK,CAAA,CAAA;AAAA;AAAA,EAAQ,UAAY,CAAA,CAAA,CAAA,CAAA;AAAA,GACjE;AAAA,EAEA,sBAA2C,GAAA;AACzC,IAAA,MAAM,KAAQ,GAAA,cAAA,CAAA;AACd,IAAA,MAAM,KAAQ,GAAA;AAAA,MACZ,CAAC,MAAA,EAAQ,IAAK,CAAA,GAAA,CAAI,IAAI,CAAA;AAAA,MACtB,CAAC,SAAA,EAAW,IAAK,CAAA,aAAA,EAAe,SAAS,gBAAgB,CAAA;AAAA,MACzD,CAAC,eAAA,EAAiB,IAAK,CAAA,GAAA,CAAI,SAAS,CAAA;AAAA,KACtC,CAAA;AACA,IAAA,OAAO,CAAC,KAAA,EAAO,IAAK,CAAA,cAAA,CAAe,KAAK,CAAC,CAAA,CAAA;AAAA,GAC3C;AAAA,EAEA,oBAAyC,GAAA;AACvC,IAAA,MAAM,KAAQ,GAAA,sBAAA,CAAA;AAEd,IAAA,IAAI,IAAO,GAAA,CAAA;AAAA,EAAK,KAAK,oBAAqB,EAAA,CAAA,CAAA,CAAA;AAE1C,IACE,SAAA,qBAAA,CAAA,cAAA,EACA,YACA,eACA,EAAA;AACA,MAAe,cAAA,CAAA,OAAA,CAAQ,CAAC,aAA0B,KAAA;AAChD,QAAA,MAAM,kBAAqB,GAAA,UAAA,CAAW,MAAO,CAAA,CAAC,SAA0B,KAAA;AACtE,UAAA,MAAM,iBAAoB,GAAA,SAAA,CAAU,aAAiB,IAAA,SAAA,CAAU,aAAc,CAAA,IAAA,CAAA;AAC7E,UAAA,OAAO,iBAAsB,KAAA,aAAA,CAAA;AAAA,SAC9B,CAAA,CAAA;AACD,QAAA,IAAI,mBAAmB,CAAI,CAAA,EAAA;AACzB,UAAQ,IAAA,IAAA,CAAA;AAAA;AAAA,EAAO,OAAO,OAAU,CAAA,EAAA,MAAA,CAAO,KAAM,CAAA,UAAA,CAAW,aAAa,CAAI,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,CAAA;AACzE,UAAmB,kBAAA,CAAA,OAAA,CAAQ,CAAC,SAA0B,KAAA;AACpD,YAAQ,IAAA,IAAA,CAAA,EAAG,gBAAgB,SAAS,CAAA,CAAA,CAAA,CAAA;AAAA,WACrC,CAAA,CAAA;AAAA,SACH;AAAA,OACD,CAAA,CAAA;AAAA,KACH;AACA,IAAsB,qBAAA,CAAA,YAAA,CAAa,KAAO,EAAA,IAAA,CAAK,GAAI,CAAA,UAAA,CAAW,IAAI,IAAK,CAAA,qBAAA,CAAsB,IAAK,CAAA,IAAI,CAAC,CAAA,CAAA;AACvG,IAAsB,qBAAA,CAAA,eAAA,CAAgB,KAAO,EAAA,IAAA,CAAK,GAAI,CAAA,UAAA,CAAW,OAAO,IAAK,CAAA,wBAAA,CAAyB,IAAK,CAAA,IAAI,CAAC,CAAA,CAAA;AAChH,IACE,qBAAA,CAAA,kBAAA,CAAmB,KACnB,EAAA,IAAA,CAAK,GAAI,CAAA,UAAA,CAAW,UACpB,IAAK,CAAA,2BAAA,CAA4B,IAAK,CAAA,IAAI,CAC5C,CAAA,CAAA;AAEA,IAAA,MAAM,oBAAoB,MAAO,CAAA,MAAA,CAAO,KAAK,GAAI,CAAA,UAAU,EACxD,IAAK,EAAA,CACL,MAAO,CAAA,CAAC,cAAc,CAAC,SAAA,CAAU,iBAAiB,CAAC,SAAA,CAAU,cAAc,IAAI,CAAA,CAAA;AAClF,IAAA,IAAI,kBAAkB,CAAI,CAAA,EAAA;AACxB,MAAQ,IAAA,IAAA,CAAA;AAAA;AAAA,EAAO,OAAO,OAAU,CAAA,EAAA,MAAA,CAAO,KAAM,CAAA,UAAA,CAAW,oBAAoB,CAAI,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,CAAA;AAChF,MAAkB,iBAAA,CAAA,OAAA,CAAQ,CAAC,SAAc,KAAA;AACvC,QAAQ,IAAA,IAAA,CAAA,EAAG,IAAK,CAAA,0BAAA,CAA2B,SAAS,CAAA,CAAA,CAAA,CAAA;AAAA,OACrD,CAAA,CAAA;AAAA,KACH;AAEA,IAAO,OAAA,CAAC,OAAO,IAAI,CAAA,CAAA;AAAA,GACrB;AAAA,EAEA,oBAA+B,GAAA;AAC7B,IAAA,MAAM,SAAmB,EAAC,CAAA;AAC1B,IAAM,MAAA,QAAA,GAAW,CAAC,MAAO,CAAA,OAAA,CAAA,EAAU,OAAO,KAAM,CAAA,UAAA,CAAW,SAAS,CAAA,CAAA,CAAA,CAAI,KAAK,CAAA,CAAA;AAC7E,IAAM,MAAA,QAAA,GAAW,CAAC,gBAAA,EAAW,EAAE,CAAA,CAAA;AAC/B,IAAA,MAAM,YAAgC,EAAC,CAAA;AACvC,IAAA,IAAA,CAAK,GAAI,CAAA,IAAA,CAAK,OAAQ,CAAA,CAAC,GAAQ,KAAA;AAC7B,MAAA,IAAI,GAAI,CAAA,aAAA,IAAiB,GAAI,CAAA,aAAA,CAAc,IAAM,EAAA;AAC/C,QAAA,SAAA,CAAU,IAAK,CAAA,CAAC,CAAQ,YAAA,EAAA,GAAA,CAAI,cAAc,IAAQ,CAAA,CAAA,EAAA,IAAA,CAAK,QAAS,CAAA,IAAA,CAAK,GAAI,CAAA,SAAA,EAAW,GAAI,CAAA,SAAS,CAAC,CAAC,CAAA,CAAA;AAAA,OACrG,MAAA,IAAW,IAAK,CAAA,GAAA,CAAI,MAAQ,EAAA;AAC1B,QAAM,MAAA,KAAA,GAAQ,KAAK,GAAI,CAAA,MAAA,CAAO,SAAS,CAAG,EAAA,GAAA,CAAI,SAAa,CAAA,CAAA,EAAA,sBAAA,CAAuB,GAAK,CAAA,CAAA,CAAA,CAAA;AACvF,QAAI,IAAA,KAAA;AAAO,UAAA,MAAA,CAAO,KAAK,KAAK,CAAA,CAAA;AAAA,OAC9B;AAAA,KACD,CAAA,CAAA;AACD,IAAA,IAAI,OAAO,CAAI,CAAA,EAAA;AACb,MAAA,MAAM,aAAgB,GAAA,MAAA,CAAO,MAAW,KAAA,CAAA,GAAI,kBAAqB,GAAA,mBAAA,CAAA;AACjE,MAAM,MAAA,UAAA,GAAqB,OAAO,KAAM,EAAA,CAAA;AACxC,MAAA,MAAM,CAAC,cAAA,EAAA,GAAmB,mBAAuB,CAAA,GAAA,UAAA,CAAW,MAAM,IAAI,CAAA,CAAA;AACtE,MAAA,MAAA,CAAO,OAAQ,CAAA,CAAC,KAAU,KAAA,KAAA,CAAM,MAAM,IAAI,CAAA,CAAE,OAAQ,CAAA,CAAC,IAAS,KAAA,mBAAA,CAAoB,IAAK,CAAA,IAAI,CAAC,CAAC,CAAA,CAAA;AAE7F,MAAU,SAAA,CAAA,IAAA,CAAK,CAAC,IAAA,CAAK,SAAU,CAAA,aAAa,GAAG,IAAK,CAAA,SAAA,CAAU,cAAc,CAAC,CAAC,CAAA,CAAA;AAC9E,MAAA,mBAAA,CAAoB,OAAQ,CAAA,CAAC,IAAS,KAAA,SAAA,CAAU,IAAK,CAAA,CAAC,EAAI,EAAA,IAAA,CAAK,SAAU,CAAA,IAAI,CAAC,CAAC,CAAC,CAAA,CAAA;AAAA,KAClF;AAEA,IAAA,OAAO,CAAG,EAAA,QAAA,CAAA;AAAA,EAAa,KAAK,cAAe,CAAA,CAAC,QAAU,EAAA,GAAG,SAAS,CAAC,CAAA,CAAA,CAAA,CAAA;AAAA,GACrE;AAAA,EAEA,sBAAsB,SAAgC,EAAA;AACpD,IAAA,MAAM,SAAS,SAAU,CAAA,aAAA,CAAA;AACzB,IAAA,MAAM,OAAU,GAAA;AAAA,MACd,CAAC,CAAM,UAAA,EAAA,MAAA,CAAO,IAAQ,CAAA,CAAA,EAAA,IAAA,CAAK,QAAS,CAAA,IAAA,CAAK,GAAI,CAAA,SAAA,EAAW,SAAU,CAAA,SAAS,CAAC,CAAA;AAAA,MAC5E,CAAC,oBAAoB,IAAK,CAAA,QAAA,CAAS,UAAU,SAAW,EAAA,SAAA,CAAU,iBAAiB,CAAC,CAAA;AAAA,MACpF,CAAC,iBAAmB,EAAA,MAAA,GAAS,GAAG,MAAO,CAAA,UAAA,CAAW,WAAW,uBAAuB,CAAA;AAAA,KACtF,CAAA;AAEA,IAAO,OAAA,CAAA;AAAA,EAAK,IAAA,CAAK,eAAe,OAAO,CAAA,CAAA,CAAA,CAAA;AAAA,GACzC;AAAA,EAEA,4BAA4B,SAAsC,EAAA;AAChE,IAAA,MAAM,SAAS,SAAU,CAAA,aAAA,CAAA;AACzB,IAAA,MAAM,OAAU,GAAA;AAAA,MACd,CAAC,CAAM,UAAA,EAAA,MAAA,CAAO,IAAQ,CAAA,CAAA,EAAA,IAAA,CAAK,QAAS,CAAA,IAAA,CAAK,GAAI,CAAA,SAAA,EAAW,SAAU,CAAA,SAAS,CAAC,CAAA;AAAA,MAC5E,CAAC,oBAAoB,IAAK,CAAA,QAAA,CAAS,UAAU,SAAW,EAAA,SAAA,CAAU,iBAAiB,CAAC,CAAA;AAAA,KACtF,CAAA;AAEA,IAAO,OAAA,CAAA;AAAA,EAAK,IAAA,CAAK,eAAe,OAAO,CAAA,CAAA,CAAA,CAAA;AAAA,GACzC;AAAA,EAEA,yBAAyB,SAAmC,EAAA;AAC1D,IAAA,MAAM,SAAS,SAAU,CAAA,aAAA,CAAA;AACzB,IAAA,MAAM,OAAU,GAAA;AAAA,MACd,CAAC,CAAM,UAAA,EAAA,MAAA,CAAO,IAAQ,CAAA,CAAA,EAAA,IAAA,CAAK,QAAS,CAAA,IAAA,CAAK,GAAI,CAAA,SAAA,EAAW,SAAU,CAAA,SAAS,CAAC,CAAA;AAAA,MAC5E,CAAC,oBAAoB,IAAK,CAAA,QAAA,CAAS,UAAU,SAAW,EAAA,SAAA,CAAU,iBAAiB,CAAC,CAAA;AAAA,KACtF,CAAA;AAEA,IAAO,OAAA,CAAA;AAAA,EAAK,IAAA,CAAK,eAAe,OAAO,CAAA,CAAA,CAAA,CAAA;AAAA,GACzC;AAAA,EAEA,2BAA2B,SAA6D,EAAA;AACtF,IAAM,MAAA,CAAC,cAAmB,EAAA,GAAA,mBAAA,CAAA,GAAuB,IAAK,CAAA,GAAA,CAAI,MAAQ,CAAA,QAAA,CAAS,SAAU,CAAA,iBAAiB,CAAE,CAAA,KAAA,CAAM,IAAI,CAAA,CAAA;AAClH,IAAA,MAAM,OAAU,GAAA;AAAA,MACd,CAAC,sCAA+B,IAAK,CAAA,QAAA,CAAS,KAAK,GAAI,CAAA,SAAA,EAAW,SAAU,CAAA,SAAS,CAAC,CAAA;AAAA,MACtF,CAAC,oBAAoB,IAAK,CAAA,QAAA,CAAS,UAAU,SAAW,EAAA,SAAA,CAAU,iBAAiB,CAAC,CAAA;AAAA,MACpF,CAAC,uBAAyB,EAAA,cAAc,CAAE,CAAA,GAAA,CAAI,KAAK,SAAS,CAAA;AAAA,MAC5D,GAAG,mBAAA,CAAoB,GAAI,CAAA,CAAC,IAAS,KAAA,CAAC,EAAI,EAAA,IAAI,CAAE,CAAA,GAAA,CAAI,IAAK,CAAA,SAAS,CAAC,CAAA;AAAA,KACrE,CAAA;AAEA,IAAO,OAAA,CAAA;AAAA,EAAK,IAAA,CAAK,eAAe,OAAO,CAAA,CAAA,CAAA,CAAA;AAAA,GACzC;AAAA,EAEA,UAAU,GAAqB,EAAA;AAC7B,IAAA,OAAO,OAAO,OAAU,CAAA,EAAA,MAAA,CAAO,KAAM,CAAA,SAAA,CAAU,GAAG,CAAI,CAAA,CAAA,CAAA,KAAA,CAAA;AAAA,GACxD;AAAA,EAEA,mBAAwC,GAAA;AACtC,IAAA,MAAM,KAAQ,GAAA,iCAAA,CAAA;AACd,IAAA,MAAM,KAAQ,GAAA,IAAA,CAAK,GAAI,CAAA,aAAA,CAAc,MAAO,CAAA,KAAA,CAAM,GAAG,CAAA,CAAE,GAAI,CAAA,CAAC,KAAU,KAAA,CAAC,KAAK,CAAC,CAAA,CAAA;AAC7E,IAAA,OAAO,CAAC,KAAA,EAAO,IAAK,CAAA,cAAA,CAAe,KAAK,CAAC,CAAA,CAAA;AAAA,GAC3C;AAAA,EAEA,iBAAsC,GAAA;AACpC,IAAA,MAAM,KAAQ,GAAA,oBAAA,CAAA;AACd,IAAA,MAAM,EAAC,QAAA,EAAU,IAAQ,EAAA,GAAA,EAAA,CAAG,eAAgB,EAAA,CAAA;AAC5C,IAAA,MAAM,KAAoB,GAAA;AAAA,MACxB,CAAC,aAAA,EAAe,IAAK,CAAA,GAAA,CAAI,iBAAiB,cAAe,CAAA,CAAA;AAAA,MACzD,CAAC,iBAAA,EAAmB,IAAK,CAAA,GAAA,CAAI,iBAAiB,CAAA;AAAA,MAC9C,CAAC,IAAA,EAAM,CAAG,EAAA,QAAA,CAAA,CAAA,EAAY,IAAM,CAAA,CAAA,CAAA;AAAA,MAC5B,CAAC,OAAA,EAAS,OAAQ,CAAA,GAAA,CAAI,SAAS,SAAS,CAAA;AAAA,MACxC,CAAC,cAAgB,EAAA,OAAA,CAAQ,OAAO,CAAA;AAAA,KAClC,CAAA;AACA,IAAA,MAAM,aAAgB,GAAA,IAAA,CAAK,GAAI,CAAA,iBAAA,KAAsB,SAAS,SAAY,GAAA,QAAA,CAAA;AAC1E,IAAM,MAAA,UAAA,GACJ,MAAO,CAAA,OAAA,CAAA,2DAAA,EAAqE,MAAO,CAAA,KAAA,CAAM,mBACvF,CAAA,CAAA,EAAG,IAAK,CAAA,GAAA,CAAI,iBAAqB,CAAA,CAAA,EAAA,aAAA,CAAA,CACnC,CAAI,CAAA,CAAA,CAAA,KAAA,CAAA;AACN,IAAA,OAAO,CAAC,KAAA,EAAO,CAAG,EAAA,IAAA,CAAK,eAAe,KAAK,CAAA,CAAA;AAAA;AAAA,EAAQ,UAAY,CAAA,CAAA,CAAA,CAAA;AAAA,GACjE;AAAA,EAEA,eAAe,KAA2B,EAAA;AACxC,IAAA,MAAM,SAAmB,EAAC,CAAA;AAC1B,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,KAAM,CAAA,CAAA,CAAA,CAAG,QAAQ,CAAK,EAAA,EAAA;AACxC,MAAA,MAAM,aAAa,KAAM,CAAA,GAAA,CAAI,CAAC,IAAA,KAAS,KAAK,CAAE,CAAA,CAAA,CAAA;AAC9C,MAAA,MAAA,CAAO,IAAK,CAAA,IAAA,CAAK,GAAI,CAAA,GAAG,WAAW,GAAI,CAAA,CAAC,GAAQ,KAAA,MAAA,CAAO,QAAS,CAAA,GAAG,CAAE,CAAA,MAAM,CAAC,CAAC,CAAA,CAAA;AAAA,KAC/E;AACA,IAAA,MAAM,WAAc,GAAA,KAAA,CACjB,GAAI,CAAA,CAAC,IAAS,KAAA;AACb,MAAA,OAAO,IACJ,CAAA,GAAA,CAAI,CAAC,GAAA,EAAK,KAAU,KAAA;AACnB,QAAO,OAAA,CAAA,EAAG,GAAM,CAAA,EAAA,GAAA,CAAI,MAAO,CAAA,MAAA,CAAO,SAAS,MAAO,CAAA,QAAA,CAAS,GAAG,CAAA,CAAE,MAAM,CAAA,CAAA,CAAA,CAAA;AAAA,OACvE,CAAA,CACA,IAAK,CAAA,KAAK,EACV,OAAQ,EAAA,CAAA;AAAA,KACZ,CACA,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AACZ,IAAO,OAAA,WAAA,CAAA;AAAA,GACT;AAAA,EAEA,OAAA,CAAQ,OAAe,IAAsB,EAAA;AAC3C,IAAM,MAAA,cAAA,GAAiB,GAAG,KAAM,CAAA,WAAA,KAAgB,GAAI,CAAA,MAAA,CAAO,EAAK,GAAA,KAAA,CAAM,MAAM,CAAA,CAAA,CAAA,CAAA;AAC5E,IAAA,OAAO,OAAO,OAAU,CAAA,EAAA,MAAA,CAAO,MAAM,OAAQ,CAAA,cAAc,MAAM,IAAO,CAAA,CAAA,CAAA,KAAA,CAAA;AAAA,GAC1E;AACF;;ACrOA,MAAA,QAAA,GAAA,cAAqC,OAAQ,CAAA;AAAA,EAAA,MAgB9B,GAAqB,GAAA;AAChC,IAAA,MAAM,EAAC,KAAA,EAAA,GAAS,MAAM,IAAA,CAAK,MAAM,QAAO,CAAA,CAAA;AACxC,IAAM,MAAA,SAAA,GAAY,MAAM,IAAO,GAAA,IAAA,CAAK,QAAQ,KAAM,CAAA,IAAI,CAAI,GAAA,OAAA,CAAQ,GAAI,EAAA,CAAA;AACtE,IAAA,MAAM,GAAW,GAAA,MAAMC,IAAQ,CAAA,SAAA,EAAW,QAAQ,CAAA,CAAA;AAClD,IAAO,MAAA,CAAA,IAAA,CAAK,KAAK,GAAK,EAAA,EAAC,QAAQ,KAAM,CAAA,MAAA,EAAiB,CAAC,CAAA,CAAA;AACvD,IAAA,IAAI,GAAI,CAAA,MAAA;AAAQ,MAAA,OAAA,CAAQ,KAAK,CAAC,CAAA,CAAA;AAAA,GAChC;AACF,CAAA,CAAA;AAvBA,IAAA,OAAA,GAAA,SAAA;AAAA,QACS,WAAc,GAAA,mDAAA,CAAA;AADvB,QAGS,KAAQ,GAAA;AAAA,EAAA,GACV,GAAI,CAAA,WAAA;AAAA,EACJ,GAAA,QAAA;AAAA,EACH,MAAA,EAAQ,MAAM,MAAO,CAAA;AAAA,IACnB,MAAQ,EAAA,KAAA;AAAA,IACR,IAAM,EAAA,GAAA;AAAA,IACN,WAAa,EAAA,eAAA;AAAA,IACb,OAAA,EAAS,CAAC,MAAA,EAAQ,MAAM,CAAA;AAAA,IACxB,OAAS,EAAA,MAAA;AAAA,IACT,GAAK,EAAA,qBAAA;AAAA,GACN,CAAA;AACH,CAAA;;;;"}