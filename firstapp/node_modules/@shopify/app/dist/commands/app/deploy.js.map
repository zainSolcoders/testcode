{"version":3,"file":"deploy.js","sources":["../../../src/cli/services/deploy/bundle.ts","../../../src/cli/services/deploy/upload.ts","../../../src/cli/services/deploy.ts","../../../src/cli/commands/app/deploy.ts"],"sourcesContent":["import {buildExtension} from '../build/extension'\nimport {App} from '../../models/app/app'\nimport {path, output, archiver, temporary, file, error} from '@shopify/cli-kit'\n\nimport {Writable} from 'node:stream'\n\ninterface BundleOptions {\n  // The app to be bundled\n  app: App\n\n  // Path to the .zip file that represents the app bundle\n  bundlePath: string\n}\n\nexport async function bundle(options: BundleOptions) {\n  await temporary.directory(async (tmpDir) => {\n    const bundleDirectory = path.join(tmpDir, 'bundle')\n    await file.mkdir(bundleDirectory)\n\n    await output.concurrent([\n      {\n        prefix: 'extensions',\n        action: async (stdout: Writable, stderr: Writable, signal: error.AbortSignal) => {\n          await buildExtension({app: options.app, extensions: options.app.extensions.ui, stdout, stderr, signal})\n        },\n      },\n    ])\n\n    output.newline()\n    output.success(`${options.app.name} built`)\n\n    await archiver.zip(bundleDirectory, options.bundlePath)\n  })\n}\n","import {api, error, session, http, id} from '@shopify/cli-kit'\n\nimport fs from 'fs'\n\ninterface UploadOptions {\n  /** The application API key */\n  apiKey: string\n\n  /** The path to the bundle file to be uploaded */\n  bundlePath: string\n}\n\n/**\n * Uploads a bundle.\n * @param options {UploadOptions} The upload options\n */\nexport async function upload(options: UploadOptions) {\n  const token = await session.ensureAuthenticatedPartners()\n  const deploymentUUID = id.generateRandomUUID()\n  const signedURL = await generateUrl(options.apiKey, deploymentUUID)\n\n  const formData = http.formData()\n  const buffer = fs.readFileSync(options.bundlePath)\n  formData.append('my_upload', buffer)\n  await http.fetch(signedURL, {\n    method: 'put',\n    body: buffer,\n    headers: formData.getHeaders(),\n  })\n\n  const variables: api.graphql.CreateDeploymentVariables = {\n    apiKey: options.apiKey,\n    uuid: deploymentUUID,\n    bundleUrl: signedURL,\n  }\n\n  const mutation = api.graphql.CreateDeployment\n  const result: api.graphql.CreateDeploymentSchema = await api.partners.request(mutation, token, variables)\n  if (result.deploymentCreate && result.deploymentCreate.userErrors && result.deploymentCreate.userErrors.length > 0) {\n    const errors = result.deploymentCreate.userErrors.map((error) => error.message).join(', ')\n    throw new error.Abort(errors)\n  }\n}\n\n/**\n * It generates a URL to upload an app bundle.\n * @param apiKey {string} The application API key\n * @param deploymentUUID {string} The unique identifier of the deployment.\n * @returns\n */\nexport async function generateUrl(apiKey: string, deploymentUUID: string) {\n  const mutation = api.graphql.GenerateSignedUploadUrl\n  const token = await session.ensureAuthenticatedPartners()\n  const variables: api.graphql.GenerateSignedUploadUrlVariables = {\n    apiKey,\n    deploymentUuid: deploymentUUID,\n    bundleFormat: 1,\n  }\n\n  const result: api.graphql.GenerateSignedUploadUrlSchema = await api.partners.request(mutation, token, variables)\n  if (\n    result.deploymentGenerateSignedUploadUrl &&\n    result.deploymentGenerateSignedUploadUrl.userErrors &&\n    result.deploymentGenerateSignedUploadUrl.userErrors.length > 0\n  ) {\n    const errors = result.deploymentGenerateSignedUploadUrl.userErrors.map((error) => error.message).join(', ')\n    throw new error.Abort(errors)\n  }\n\n  return result.deploymentGenerateSignedUploadUrl.signedUploadUrl\n}\n","import {bundle} from './deploy/bundle'\nimport {upload} from './deploy/upload'\n\nimport {ensureDeployEnvironment} from './environment'\nimport {App} from '../models/app/app'\nimport {path, output, temporary} from '@shopify/cli-kit'\n\ninterface DeployOptions {\n  /** The app to be built and uploaded */\n  app: App\n}\n\nexport const deploy = async (options: DeployOptions) => {\n  const {app, identifiers} = await ensureDeployEnvironment({app: options.app})\n  const apiKey = identifiers.app\n\n  output.newline()\n  output.info('Pushing your code to Shopify...')\n\n  output.newline()\n  output.success(`${app.name} deployed to Shopify Partners`)\n\n  await temporary.directory(async (tmpDir) => {\n    const bundlePath = path.join(tmpDir, `${app.name}.zip`)\n    await bundle({app, bundlePath})\n    await upload({apiKey, bundlePath})\n\n    output.newline()\n    output.info('Summary')\n    app.extensions.ui.forEach((extension) => {\n      output.info(\n        output.content`${output.token.magenta('âœ”')} ${path.basename(\n          extension.directory,\n        )} is deployed to Shopify but not yet live`,\n      )\n    })\n  })\n}\n","import {appFlags} from '../../flags'\nimport {deploy} from '../../services/deploy'\nimport {App, load as loadApp} from '../../models/app/app'\nimport {Command} from '@oclif/core'\nimport {path, cli} from '@shopify/cli-kit'\n\nexport default class Deploy extends Command {\n  static description = 'Deploy your Shopify app'\n\n  static flags = {\n    ...cli.globalFlags,\n    ...appFlags,\n  }\n\n  async run(): Promise<void> {\n    const {args, flags} = await this.parse(Deploy)\n    const directory = flags.path ? path.resolve(flags.path) : process.cwd()\n    const app: App = await loadApp(directory)\n    await deploy({app})\n  }\n}\n"],"names":["loadApp"],"mappings":"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"}