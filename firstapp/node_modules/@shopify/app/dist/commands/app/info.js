import { d as uiExtensions, t as themeExtensions, f as functionExtensions, h as configurationFileNames, a as appFlags, l as load } from '../../app-e1e50846.js';
import { output, store, path, os, cli } from '@shopify/cli-kit';
import { Flags, Command } from '@oclif/core';

function info(app, { format }) {
  if (format === "json") {
    return output.content`${JSON.stringify(app, null, 2)}`;
  } else {
    const appInfo = new AppInfo$1(app);
    return appInfo.output();
  }
}
class AppInfo$1 {
  constructor(app) {
    this.app = app;
    this.cachedAppInfo = store.getAppInfo(app.directory);
  }
  output() {
    const sections = [
      this.devConfigsSection(),
      this.projectSettingsSection(),
      this.appComponentsSection(),
      this.accessScopesSection(),
      this.systemInfoSection()
    ];
    return sections.map((sectionContents) => this.section(...sectionContents)).join("\n\n");
  }
  devConfigsSection() {
    const title = "Configs for Dev";
    let storeDescription = "not configured";
    if (this.cachedAppInfo) {
      const storeInfo = store.getAppInfo(this.app.directory);
      if (storeInfo && storeInfo.storeFqdn)
        storeDescription = storeInfo.storeFqdn;
    }
    const lines = [
      ["App", this.app.name],
      ["Dev store", storeDescription]
    ];
    const postscript = output.content`ðŸ’¡ To change these, run ${output.token.command(this.app.dependencyManager, "shopify dev", "--reset")}`.value;
    return [title, `${this.linesToColumns(lines)}

${postscript}`];
  }
  projectSettingsSection() {
    const title = "Your Project";
    const lines = [
      ["Name", this.app.name],
      ["API key", this.cachedAppInfo?.appId || "not configured"],
      ["Root location", this.app.directory]
    ];
    return [title, this.linesToColumns(lines)];
  }
  appComponentsSection() {
    const title = "Directory Components";
    let body = `
${this.webComponentsSection()}`;
    function augmentWithExtensions(extensionTypes, extensions, outputFormatter) {
      extensionTypes.forEach((extensionType) => {
        const relevantExtensions = extensions.filter((extension) => {
          const configurationType = extension.configuration && extension.configuration.type;
          return configurationType === extensionType;
        });
        if (relevantExtensions[0]) {
          body += `

${output.content`${output.token.subheading(extensionType)}`.value}`;
          relevantExtensions.forEach((extension) => {
            body += `${outputFormatter(extension)}`;
          });
        }
      });
    }
    augmentWithExtensions(uiExtensions.types, this.app.extensions.ui, this.uiExtensionSubSection.bind(this));
    augmentWithExtensions(themeExtensions.types, this.app.extensions.theme, this.themeExtensionSubSection.bind(this));
    augmentWithExtensions(functionExtensions.types, this.app.extensions.function, this.functionExtensionSubSection.bind(this));
    const invalidExtensions = Object.values(this.app.extensions).flat().filter((extension) => !extension.configuration || !extension.configuration.type);
    if (invalidExtensions[0]) {
      body += `

${output.content`${output.token.subheading("Invalid Extensions")}`.value}`;
      invalidExtensions.forEach((extension) => {
        body += `${this.invalidExtensionSubSection(extension)}`;
      });
    }
    return [title, body];
  }
  webComponentsSection() {
    const errors = [];
    const subtitle = [output.content`${output.token.subheading("web app")}`.value];
    const toplevel = ["\u{1F4C2} webs", ""];
    const sublevels = [];
    this.app.webs.forEach((web) => {
      if (web.configuration && web.configuration.type) {
        sublevels.push([`  \u{1F4C2} ${web.configuration.type}`, path.relative(this.app.directory, web.directory)]);
      } else if (this.app.errors) {
        const error = this.app.errors.getError(`${web.directory}/${configurationFileNames.web}`);
        if (error)
          errors.push(error);
      }
    });
    if (errors[0]) {
      const errorHeadline = errors.length === 1 ? "validation error" : "validation errors";
      const firstError = errors.shift();
      const [errorFirstLine, ...errorRemainingLines] = firstError.split("\n");
      errors.forEach((error) => error.split("\n").forEach((line) => errorRemainingLines.push(line)));
      sublevels.push([this.errorText(errorHeadline), this.errorText(errorFirstLine)]);
      errorRemainingLines.forEach((line) => sublevels.push(["", this.errorText(line)]));
    }
    return `${subtitle}
${this.linesToColumns([toplevel, ...sublevels])}`;
  }
  uiExtensionSubSection(extension) {
    const config = extension.configuration;
    const details = [
      [`\u{1F4C2} ${config.name}`, path.relative(this.app.directory, extension.directory)],
      ["     config file", path.relative(extension.directory, extension.configurationPath)],
      ["     metafields", config ? `${config.metafields.length}` : "configuration invalid"]
    ];
    return `
${this.linesToColumns(details)}`;
  }
  functionExtensionSubSection(extension) {
    const config = extension.configuration;
    const details = [
      [`\u{1F4C2} ${config.name}`, path.relative(this.app.directory, extension.directory)],
      ["     config file", path.relative(extension.directory, extension.configurationPath)]
    ];
    return `
${this.linesToColumns(details)}`;
  }
  themeExtensionSubSection(extension) {
    const config = extension.configuration;
    const details = [
      [`\u{1F4C2} ${config.name}`, path.relative(this.app.directory, extension.directory)],
      ["     config file", path.relative(extension.directory, extension.configurationPath)]
    ];
    return `
${this.linesToColumns(details)}`;
  }
  invalidExtensionSubSection(extension) {
    const [errorFirstLine, ...errorRemainingLines] = this.app.errors.getError(extension.configurationPath).split("\n");
    const details = [
      [`\u{1F4C2} extension root directory`, path.relative(this.app.directory, extension.directory)],
      ["     config file", path.relative(extension.directory, extension.configurationPath)],
      ["     validation error", errorFirstLine].map(this.errorText),
      ...errorRemainingLines.map((line) => ["", line].map(this.errorText))
    ];
    return `
${this.linesToColumns(details)}`;
  }
  errorText(str) {
    return output.content`${output.token.errorText(str)}`.value;
  }
  accessScopesSection() {
    const title = "Access Scopes in Root TOML File";
    const lines = this.app.configuration.scopes.split(",").map((scope) => [scope]);
    return [title, this.linesToColumns(lines)];
  }
  systemInfoSection() {
    const title = "Tooling and System";
    const { platform, arch } = os.platformAndArch();
    const lines = [
      ["Shopify CLI", this.app.nodeDependencies["@shopify/cli"]],
      ["Package manager", this.app.dependencyManager],
      ["OS", `${platform}-${arch}`],
      ["Shell", process.env.SHELL || "unknown"],
      ["Node version", process.version]
    ];
    const updateCommand = this.app.dependencyManager === "yarn" ? "upgrade" : "update";
    const postscript = output.content`ðŸ’¡ To update to the latest version of the Shopify CLI, run ${output.token.genericShellCommand(`${this.app.dependencyManager} ${updateCommand}`)}`.value;
    return [title, `${this.linesToColumns(lines)}

${postscript}`];
  }
  linesToColumns(lines) {
    const widths = [];
    for (let i = 0; i < lines[0].length; i++) {
      const columnRows = lines.map((line) => line[i]);
      widths.push(Math.max(...columnRows.map((row) => output.unstyled(row).length)));
    }
    const paddedLines = lines.map((line) => {
      return line.map((col, index) => {
        return `${col}${" ".repeat(widths[index] - output.unstyled(col).length)}`;
      }).join("   ").trimEnd();
    }).join("\n");
    return paddedLines;
  }
  section(title, body) {
    const formattedTitle = `${title.toUpperCase()}${" ".repeat(35 - title.length)}`;
    return output.content`${output.token.heading(formattedTitle)}\n${body}`.value;
  }
}

const _AppInfo = class extends Command {
  async run() {
    const { flags } = await this.parse(_AppInfo);
    const directory = flags.path ? path.resolve(flags.path) : process.cwd();
    const app = await load(directory, "report");
    output.info(info(app, { format: flags.format }));
    if (app.errors)
      process.exit(2);
  }
};
let AppInfo = _AppInfo;
AppInfo.description = "Print basic information about your app and blocks";
AppInfo.flags = {
  ...cli.globalFlags,
  ...appFlags,
  format: Flags.string({
    hidden: false,
    char: "f",
    description: "output format",
    options: ["json", "text"],
    default: "text",
    env: "SHOPIFY_FLAG_FORMAT"
  })
};

export { AppInfo as default };
//# sourceMappingURL=info.js.map
