{"version":3,"file":"cli-852b5950.js","sources":["../src/cli/utilities/extensions/binary.ts","../src/cli/environment.ts","../src/cli/utilities/extensions/cli.ts"],"sourcesContent":["import {versions} from '../../constants'\nimport {http, file, path, os, error, checksum, constants} from '@shopify/cli-kit'\nimport zlib from 'node:zlib'\nimport {createWriteStream} from 'node:fs'\nimport {pipeline} from 'node:stream'\nimport {promisify} from 'node:util'\n\nconst SUPPORTED_SYSTEMS = ['darwin amd64', 'darwin arm64', 'linux 386', 'linux amd64', 'windows 386', 'windows amd64']\nconst RELEASE_DOWNLOADS_URL = 'https://github.com/Shopify/shopify-cli-extensions/releases/download'\n\nexport const UnsupportedPlatformError = ({platform, arch}: {platform: string; arch: string}) => {\n  return new error.Abort(\n    `The current platform ${platform} and architecture ${arch} are not supported for extensions development.`,\n  )\n}\n\nexport async function getBinaryPathOrDownload(): Promise<string> {\n  // Return the path if it already exists\n  const binaryLocalPath = await getBinaryLocalPath()\n  if (await binaryExists()) {\n    return binaryLocalPath\n  }\n  const {platform, arch} = os.platformAndArch()\n  validatePlatformSupport({platform, arch})\n\n  let artifact = `shopify-extensions-${platform}-${arch}`\n  if (platform === 'windows') artifact += '.exe'\n\n  return file.inTemporaryDirectory(async (tmpDir) => {\n    const outputBinary = await download({into: tmpDir, artifact})\n    await file.mkdir(path.join(path.dirname(outputBinary)))\n    await file.move(outputBinary, binaryLocalPath, {overwrite: true})\n    await file.chmod(binaryLocalPath, 0o755)\n    return binaryLocalPath\n  })\n}\n\nasync function download({into, artifact}: {into: string; artifact: string}): Promise<string> {\n  const assetDownloadUrl = getReleaseArtifactURL({\n    name: artifact,\n    extension: 'gz',\n  })\n  const response = await http.fetch(assetDownloadUrl)\n  const outputBinary = path.join(into, artifact)\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  await promisify(pipeline)(response.body as any, zlib.createGunzip(), createWriteStream(outputBinary))\n\n  const md5DownloadUrl = getReleaseArtifactURL({\n    name: artifact,\n    extension: 'md5',\n  })\n  await checksum.validateMD5({file: outputBinary, md5FileURL: md5DownloadUrl})\n  return outputBinary\n}\n\nexport function getReleaseArtifactURL({name, extension}: {name: string; extension: string}) {\n  return `${RELEASE_DOWNLOADS_URL}/${versions.extensionsBinary}/${name}.${extension}`\n}\n\nexport function validatePlatformSupport({platform, arch}: {platform: string; arch: string}) {\n  if (!SUPPORTED_SYSTEMS.includes(`${platform} ${arch}`)) {\n    throw UnsupportedPlatformError({\n      platform,\n      arch,\n    })\n  }\n}\n\nexport async function ensureBinaryDirectoryExists(): Promise<void> {\n  const binaryPath = await getBinaryLocalPath()\n  await file.mkdir(path.dirname(binaryPath))\n}\n\nexport async function binaryExists(): Promise<boolean> {\n  const binaryPath = await getBinaryLocalPath()\n  return file.exists(binaryPath)\n}\n\nexport async function getBinaryLocalPath(): Promise<string> {\n  const {platform, arch} = os.platformAndArch()\n  const binariesDirectory = constants.paths.directories.cache.vendor.binaries()\n  const extensionsDirectory = path.join(binariesDirectory, 'extensions')\n  let binaryName = `${versions.extensionsBinary}-${platform}-${arch}`\n  if (platform === 'windows') {\n    binaryName += '.exe'\n  }\n  return path.join(extensionsDirectory, binaryName)\n}\n","import {environmentVariables} from './constants'\nimport {environment} from '@shopify/cli-kit'\n\n/**\n * Returns whether we should run the extensions' CLI through the sources.\n * @param env {NodeJS.ProcesEnv} Environment object containing the environment variables.\n * @returns True if the CLI should run the extensions' CLI through its sources.\n */\nexport function useExtensionsCLISources(env = process.env): boolean {\n  return environment.utilities.isTruthy(env[environmentVariables.useExtensionsCLISources])\n}\n","import {getBinaryPathOrDownload} from './binary'\nimport {useExtensionsCLISources} from '../../environment'\nimport {environment, error, path, system} from '@shopify/cli-kit'\nimport {fileURLToPath} from 'url'\n\nlet building = false\nlet built = false\n\nconst NodeExtensionsCLINotFoundError = () => {\n  return new error.Bug(`Couldn't find the shopify-cli-extensions Node binary`)\n}\n\n/**\n * This function runs the extensions' CLI and has support for running\n * it through its source code when the SHOPIFY_USE_EXTENSIONS_CLI_SOURCES=1 variable\n * is set.\n * @param args {string[]} Arguments to pass to the CLI\n * @param options {system.ExecOptions} Options to configure the process execution.\n */\nexport async function runGoExtensionsCLI(args: string[], options: system.ExecOptions = {}) {\n  const stdout = options.stdout || {write: () => {}}\n  if (useExtensionsCLISources()) {\n    const projectDirectory = path.join(\n      environment.local.homeDirectory(),\n      'src/github.com/shopify/shopify-cli-extensions',\n    )\n    stdout.write(`Using extensions CLI from ${projectDirectory}`)\n    try {\n      if (building) {\n        // eslint-disable-next-line no-unmodified-loop-condition\n        while (!built) {\n          // eslint-disable-next-line no-await-in-loop\n          await new Promise((resolve) => setTimeout(resolve, 1000))\n        }\n      } else {\n        building = true\n        stdout.write('Building extensions CLI...')\n        await system.exec('make', ['build'], {\n          ...options,\n          stdout: undefined,\n          stderr: undefined,\n          cwd: projectDirectory,\n        })\n        built = true\n        stdout.write('Built extensions CLI successfully!')\n      }\n      await system.exec(path.join(projectDirectory, 'shopify-extensions'), args, options)\n    } catch {\n      throw new error.AbortSilent()\n    }\n  } else {\n    const binaryPath = await getBinaryPathOrDownload()\n    await system.exec(binaryPath, [...args], options)\n  }\n}\n\n/**\n * The extensions' CLI is comprised by a Go and Node executable. The latter is distributed\n * as an NPM package, @shopify/shopify-cli-extensions, which is dependency of @shopify/app.\n * This method looks up the binary under node_modules/.bin and returns its path.\n * @returns {Promise<string>} A promise that resolves with the path to the Node executable.\n */\nexport async function nodeExtensionsCLIPath(): Promise<string> {\n  const cwd = path.dirname(fileURLToPath(import.meta.url))\n  const executablePath = await path.findUp('node_modules/.bin/shopify-cli-extensions', {type: 'file', cwd})\n  if (!executablePath) {\n    throw NodeExtensionsCLINotFoundError()\n  }\n  return executablePath\n}\n"],"names":[],"mappings":"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"}