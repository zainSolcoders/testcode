{"version":3,"file":"environment-52fb1530.js","sources":["../src/cli/services/dev/fetch.ts","../src/cli/prompts/dev.ts","../src/cli/services/dev/select-app.ts","../src/cli/services/dev/select-store.ts","../src/cli/services/environment.ts"],"sourcesContent":["import {Organization, OrganizationApp, OrganizationStore} from '../../models/organization'\nimport {api, error} from '@shopify/cli-kit'\n\nconst NoOrgError = () =>\n  new error.Abort(\n    'No Organization found',\n    'You need to create a Shopify Partners organization: https://partners.shopify.com/signup ',\n  )\n\nexport interface FetchResponse {\n  organization: Organization\n  apps: OrganizationApp[]\n  stores: OrganizationStore[]\n}\n\n/**\n * Fetch all organizations the user belongs to\n * If the user doesn't belong to any org, throw an error\n * @param token {string} Token to access partners API\n * @returns {Promise<Organization[]>} List of organizations\n */\nexport async function fetchOrganizations(token: string): Promise<Organization[]> {\n  const query = api.graphql.AllOrganizationsQuery\n  const result: api.graphql.AllOrganizationsQuerySchema = await api.partners.request(query, token)\n  const organizations = result.organizations.nodes\n  if (organizations.length === 0) throw NoOrgError()\n  return organizations\n}\n\n/**\n * Fetch all apps and stores for the given organization\n * @param orgId {string} Organization ID\n * @param token {string} Token to access partners API\n * @returns {Promise<FetchResponse>} Current organization details and list of apps and stores\n */\nexport async function fetchOrgAndApps(orgId: string, token: string): Promise<FetchResponse> {\n  const query = api.graphql.FindOrganizationQuery\n  const result: api.graphql.FindOrganizationQuerySchema = await api.partners.request(query, token, {id: orgId})\n  const org = result.organizations.nodes[0]\n  if (!org) throw NoOrgError()\n  const parsedOrg = {id: org.id, businessName: org.businessName}\n  return {organization: parsedOrg, apps: org.apps.nodes, stores: []}\n}\n\nexport async function fetchAppFromApiKey(apiKey: string, token: string): Promise<OrganizationApp> {\n  const res: api.graphql.FindAppQuerySchema = await api.partners.request(api.graphql.FindAppQuery, token, {apiKey})\n  return res.app\n}\n\nexport async function fetchAllStores(orgId: string, token: string): Promise<OrganizationStore[]> {\n  const query = api.graphql.AllStoresByOrganizationQuery\n  const result: api.graphql.AllStoresByOrganizationSchema = await api.partners.request(query, token, {id: orgId})\n  return result.organizations.nodes[0].stores.nodes\n}\n","import {Organization, OrganizationApp, OrganizationStore} from '../models/organization'\nimport {output, ui} from '@shopify/cli-kit'\n\nexport async function selectOrganizationPrompt(organizations: Organization[]): Promise<Organization> {\n  if (organizations.length === 1) {\n    return organizations[0]\n  }\n  const orgList = organizations.map((org) => ({name: org.businessName, value: org.id}))\n  const questions: ui.Question = {\n    type: 'autocomplete',\n    name: 'id',\n    message: 'Which Partners organization is this work for?',\n    choices: orgList,\n  }\n  const choice: {id: string} = await ui.prompt([questions])\n  return organizations.find((org) => org.id === choice.id)!\n}\n\nexport async function selectAppPrompt(apps: OrganizationApp[]): Promise<OrganizationApp> {\n  const appList = apps.map((app) => ({name: app.title, value: app.apiKey}))\n  const questions: ui.Question = {\n    type: 'autocomplete',\n    name: 'apiKey',\n    message: 'Which existing app is this for?',\n    choices: appList,\n  }\n  const choice: {apiKey: string} = await ui.prompt([questions])\n  return apps.find((app) => app.apiKey === choice.apiKey)!\n}\n\nexport async function selectStorePrompt(stores: OrganizationStore[]): Promise<OrganizationStore | undefined> {\n  if (stores.length === 0) return undefined\n  if (stores.length === 1) {\n    output.completed(`Using your default dev store (${stores[0].shopName}) to preview your project`)\n    return stores[0]\n  }\n  const storeList = stores.map((store) => ({name: store.shopName, value: store.shopId}))\n\n  const questions: ui.Question = {\n    type: 'autocomplete',\n    name: 'id',\n    message: 'Which development store would you like to use to view your project?',\n    choices: storeList,\n  }\n  const choice: {id: string} = await ui.prompt([questions])\n  return stores.find((store) => store.shopId === choice.id)\n}\n\nexport async function appNamePrompt(currentName: string): Promise<string> {\n  const questions: ui.Question = {\n    type: 'input',\n    name: 'name',\n    message: 'App Name',\n    default: currentName,\n    validate: (value) => {\n      if (value.length === 0) {\n        return \"App Name can't be empty\"\n      }\n      if (value.length > 30) {\n        return 'App name is too long (maximum is 30 characters)'\n      }\n      if (value.includes('shopify')) {\n        return 'Invalid app name'\n      }\n      return true\n    },\n  }\n  const input: {name: string} = await ui.prompt([questions])\n  return input.name\n}\n\nexport async function reloadStoreListPrompt(): Promise<boolean> {\n  const options = [\n    {name: 'Yes, reload my stores', value: 'reload'},\n    {name: 'No, cancel dev', value: 'cancel'},\n  ]\n\n  const questions: ui.Question = {\n    type: 'select',\n    name: 'value',\n    message: 'Have you created a new dev store?',\n    choices: options,\n  }\n  const choice: {value: string} = await ui.prompt([questions])\n  return choice.value === 'reload'\n}\n\nexport async function createAsNewAppPrompt(): Promise<boolean> {\n  const options = [\n    {name: 'Yes, create it as a new app', value: 'yes'},\n    {name: 'No, connect it to an existing app', value: 'cancel'},\n  ]\n\n  const questions: ui.Question = {\n    type: 'select',\n    name: 'value',\n    message: 'Create this project as a new app on Shopify?',\n    choices: options,\n  }\n  const choice: {value: string} = await ui.prompt([questions])\n  return choice.value === 'yes'\n}\n","import {fetchAppFromApiKey} from './fetch'\nimport {appNamePrompt, createAsNewAppPrompt, selectAppPrompt} from '../../prompts/dev'\nimport {App} from '../../models/app/app'\nimport {OrganizationApp} from '../../models/organization'\nimport {api, error, output} from '@shopify/cli-kit'\n\n/**\n * Select an app from env, list or create a new one:\n * If a cachedAppId is provided, we check if it is valid and return it. If it's not valid, ignore it.\n * If there is no valid app yet, prompt the user to select one from the list or create a new one.\n * If no apps exists, we automatically prompt the user to create a new one.\n * @param app {App} Current local app information\n * @param apps {OrganizationApp[]} List of remote available apps\n * @param orgId {string} Current Organization\n * @param cachedAppId {string} Cached app apikey\n * @returns {Promise<OrganizationApp>} The selected (or created) app\n */\nexport async function selectOrCreateApp(\n  localApp: App,\n  apps: OrganizationApp[],\n  orgId: string,\n  token: string,\n  cachedApiKey?: string,\n): Promise<OrganizationApp> {\n  if (cachedApiKey) {\n    const cachedApp = await fetchAppFromApiKey(cachedApiKey, token)\n    if (cachedApp) return cachedApp\n  }\n\n  let createNewApp = apps.length === 0\n  if (!createNewApp) createNewApp = await createAsNewAppPrompt()\n  const app = createNewApp ? await createApp(orgId, localApp, token) : await selectAppPrompt(apps)\n\n  return app\n}\n\nexport async function createApp(orgId: string, app: App, token: string): Promise<OrganizationApp> {\n  const name = await appNamePrompt(app.name)\n  const variables: api.graphql.CreateAppQueryVariables = {\n    org: parseInt(orgId, 10),\n    title: `${name}`,\n    appUrl: 'https://shopify.github.io/shopify-cli/help/start-app/',\n    redir: ['http://localhost:3456'],\n  }\n\n  const query = api.graphql.CreateAppQuery\n  const result: api.graphql.CreateAppQuerySchema = await api.partners.request(query, token, variables)\n  if (result.appCreate.userErrors.length > 0) {\n    const errors = result.appCreate.userErrors.map((error) => error.message).join(', ')\n    throw new error.Abort(errors)\n  }\n\n  output.success(`${result.appCreate.app.title} has been created on your Partners account`)\n  return result.appCreate.app\n}\n","import {fetchAllStores} from './fetch'\nimport {Organization, OrganizationStore} from '../../models/organization'\nimport {reloadStoreListPrompt, selectStorePrompt} from '../../prompts/dev'\nimport {error, output, api} from '@shopify/cli-kit'\n\nconst ConvertToDevError = (storeName: string, message: string) => {\n  return new error.Bug(\n    `Error converting store ${storeName} to a Test store: ${message}`,\n    'This store might not be compatible with draft apps, please try a different store',\n  )\n}\n\nconst StoreNotFoundError = (storeName: string, org: Organization) => {\n  return new error.Bug(\n    `Could not find ${storeName} in the Organization ${org.businessName} as a valid development store.`,\n    `Visit https://partners.shopify.com/${org.id}/stores to create a new store in your organization`,\n  )\n}\n\nconst InvalidStore = (storeName: string) => {\n  return new error.Bug(`${storeName} can't be used to test draft apps`, 'Please try with a different store.')\n}\n\nconst CreateStoreLink = (orgId: string) => {\n  const url = `https://partners.shopify.com/${orgId}/stores/new?store_type=dev_store`\n  return `Click here to create a new dev store to preview your project:\\n${url}\\n`\n}\n\n/**\n * Select store from list or\n * If a cachedStoreName is provided, we check if it is valid and return it. If it's not valid, ignore it.\n * If there are no stores, show a link to create a store and prompt the user to refresh the store list\n * If no store is finally selected, exit process\n * @param stores {OrganizationStore[]} List of available stores\n * @param orgId {string} Current organization ID\n * @param cachedStoreName {string} Cached store name\n * @returns {Promise<string>} The selected store\n */\nexport async function selectStore(\n  stores: OrganizationStore[],\n  org: Organization,\n  token: string,\n  cachedStoreName?: string,\n): Promise<string> {\n  if (cachedStoreName) {\n    await convertToTestStoreIfNeeded(cachedStoreName, stores, org, token)\n    return cachedStoreName\n  }\n\n  const store = await selectStorePrompt(stores)\n  if (store) {\n    await convertToTestStoreIfNeeded(store.shopDomain, stores, org, token)\n    return store.shopDomain\n  }\n\n  output.info(`\\n${CreateStoreLink(org.id)}`)\n  const reload = await reloadStoreListPrompt()\n  if (!reload) throw new error.AbortSilent()\n\n  const data = await fetchAllStores(org.id, token)\n  return selectStore(data, org, token)\n}\n\n/**\n * Check if the store exists in the current organization and it is a valid store\n * To be valid, it must be non-transferable.\n * @param storeDomain {string} Store domain to check\n * @param stores {OrganizationStore[]} List of available stores\n * @param orgId {string} Current organization ID\n * @param token {string} Token to access partners API\n * @returns {Promise<boolean>} True if the store is valid\n * @throws {Fatal} If the store can't be found in the organization or we fail to make it a test store\n */\nexport async function convertToTestStoreIfNeeded(\n  storeDomain: string,\n  stores: OrganizationStore[],\n  org: Organization,\n  token: string,\n): Promise<void> {\n  const store = stores.find((store) => store.shopDomain === storeDomain)\n  if (!store) throw StoreNotFoundError(storeDomain, org)\n  if (!store.transferDisabled && !store.convertableToPartnerTest) throw InvalidStore(store.shopDomain)\n  if (!store.transferDisabled) await convertStoreToTest(store, org.id, token)\n}\n\n/**\n * Convert a store to a test store so development apps can be installed\n * This can't be undone, so we ask the user to confirm\n * @param store {OrganizationStore} Store to convert\n * @param orgId {string} Current organization ID\n * @param token {string} Token to access partners API\n */\nexport async function convertStoreToTest(store: OrganizationStore, orgId: string, token: string) {\n  const query = api.graphql.ConvertDevToTestStoreQuery\n  const variables: api.graphql.ConvertDevToTestStoreVariables = {\n    input: {\n      organizationID: parseInt(orgId, 10),\n      shopId: store.shopId,\n    },\n  }\n  const result: api.graphql.ConvertDevToTestStoreSchema = await api.partners.request(query, token, variables)\n  if (!result.convertDevToTestStore.convertedToTestStore) {\n    const errors = result.convertDevToTestStore.userErrors.map((error) => error.message).join(', ')\n    throw ConvertToDevError(store.shopDomain, errors)\n  }\n  output.success(`Converted ${store.shopDomain} to a Test store`)\n}\n","import {selectOrCreateApp} from './dev/select-app'\nimport {fetchAllStores, fetchAppFromApiKey, fetchOrgAndApps, fetchOrganizations, FetchResponse} from './dev/fetch'\nimport {selectStore, convertToTestStoreIfNeeded} from './dev/select-store'\nimport {selectOrganizationPrompt} from '../prompts/dev'\nimport {App, Identifiers, updateAppIdentifiers, getAppIdentifiers, Extension} from '../models/app/app'\nimport {Organization, OrganizationApp, OrganizationStore} from '../models/organization'\nimport {error, output, session, store as conf, ui, environment} from '@shopify/cli-kit'\n\nconst InvalidApiKeyError = (apiKey: string) => {\n  return new error.Abort(\n    `Invalid API key: ${apiKey}`,\n    'You can find the apiKey in the app settings in the Partner Dashboard.',\n  )\n}\n\nexport interface DevEnvironmentOptions {\n  app: App\n  apiKey?: string\n  store?: string\n  reset: boolean\n}\n\ninterface DevEnvironmentOutput {\n  app: Omit<OrganizationApp, 'apiSecretKeys' | 'apiKey'> & {apiSecret?: string}\n  store: string\n  identifiers: Identifiers\n}\n\n/**\n * Make sure there is a valid environment to execute `dev`\n * That means we have a valid organization, app and dev store selected.\n *\n * If there are app/store from flags, we check if they are valid. If they are not, throw an error.\n * If there is cached info (user ran `dev` previously), check if it is still valid and return it.\n * If there is no cached info (or is invalid):\n *  - Show prompts to select an org, app and dev store\n *  - The new selection will be saved as global configuration\n *  - The `shopify.app.toml` file will be updated with the new app apiKey\n *\n * @param options {DevEnvironmentInput} Current dev environment options\n * @returns {Promise<DevEnvironmentOutput>} The selected org, app and dev store\n */\nexport async function ensureDevEnvironment(options: DevEnvironmentOptions): Promise<DevEnvironmentOutput> {\n  const token = await session.ensureAuthenticatedPartners()\n  const cachedInfo = getAppDevCachedInfo({\n    reset: options.reset,\n    directory: options.app.directory,\n    apiKey: options.apiKey ?? conf.getAppInfo(options.app.directory)?.appId,\n  })\n\n  const explanation =\n    `\\nLooks like this is the first time you're running dev for this project.\\n` +\n    'Configure your preferences by answering a few questions.\\n'\n\n  if (cachedInfo === undefined && !options.reset) {\n    output.info(explanation)\n  }\n\n  const orgId = cachedInfo?.orgId || (await selectOrg(token))\n  const {organization, apps, stores} = await fetchOrgsAppsAndStores(orgId, token)\n\n  let {app: selectedApp, store: selectedStore} = await dataFromInput(options, organization, stores, token)\n  if (selectedApp && selectedStore) {\n    // eslint-disable-next-line no-param-reassign\n    options = await updateDevOptions({...options, apiKey: selectedApp.apiKey})\n\n    conf.setAppInfo({appId: selectedApp.apiKey, directory: options.app.directory, storeFqdn: selectedStore, orgId})\n    return {\n      app: {\n        ...selectedApp,\n        apiSecret: selectedApp.apiSecretKeys.length === 0 ? undefined : selectedApp.apiSecretKeys[0].secret,\n      },\n      store: selectedStore,\n      identifiers: {\n        app: selectedApp.apiKey,\n        extensions: {},\n      },\n    }\n  }\n\n  selectedApp = selectedApp || (await selectOrCreateApp(options.app, apps, orgId, token, cachedInfo?.appId))\n  conf.setAppInfo({appId: selectedApp.apiKey, directory: options.app.directory, orgId})\n\n  // eslint-disable-next-line no-param-reassign\n  options = await updateDevOptions({...options, apiKey: selectedApp.apiKey})\n  selectedStore = selectedStore || (await selectStore(stores, organization, token, cachedInfo?.storeFqdn))\n  conf.setAppInfo({appId: selectedApp.apiKey, directory: options.app.directory, storeFqdn: selectedStore})\n\n  if (selectedApp.apiKey === cachedInfo?.appId && selectedStore === cachedInfo.storeFqdn) {\n    showReusedValues(organization.businessName, options.app, selectedStore)\n  }\n\n  return {\n    app: {\n      ...selectedApp,\n      apiSecret: selectedApp.apiSecretKeys.length === 0 ? undefined : selectedApp.apiSecretKeys[0].secret,\n    },\n    store: selectedStore,\n    identifiers: {\n      app: selectedApp.apiKey,\n      extensions: {},\n    },\n  }\n}\n\nasync function updateDevOptions(options: DevEnvironmentOptions & {apiKey: string}) {\n  const updatedApp = await updateAppIdentifiers({\n    app: options.app,\n    identifiers: {\n      app: options.apiKey,\n      extensions: {},\n    },\n    environmentType: 'production',\n  })\n  return {\n    ...options,\n    app: updatedApp,\n  }\n}\n\nexport interface DeployEnvironmentOptions {\n  app: App\n}\n\ninterface DeployEnvironmentOutput {\n  app: App\n  partnersApp: Omit<OrganizationApp, 'apiSecretKeys' | 'apiKey'>\n  identifiers: Identifiers\n}\n\nexport async function ensureDeployEnvironment(options: DeployEnvironmentOptions): Promise<DeployEnvironmentOutput> {\n  const token = await session.ensureAuthenticatedPartners()\n  const envIdentifiers = await getAppIdentifiers({app: options.app, environmentType: 'production'})\n  const areIdentifiersMissing = getAreIdentifiersMissing(options.app, envIdentifiers)\n\n  let identifiers: Identifiers\n  let partnersApp: OrganizationApp\n\n  if (areIdentifiersMissing) {\n    const orgId = await selectOrg(token)\n    const {apps} = await fetchOrgsAppsAndStores(orgId, token)\n\n    let appId: string\n    if (envIdentifiers.app) {\n      appId = envIdentifiers.app\n      partnersApp = await fetchAppFromApiKey(appId, token)\n    } else {\n      partnersApp = await selectOrCreateApp(options.app, apps, orgId, token, undefined)\n      appId = partnersApp.apiKey\n    }\n\n    identifiers = {\n      app: appId,\n      extensions: {},\n    }\n    // eslint-disable-next-line no-param-reassign\n    options = {\n      ...options,\n      app: await updateAppIdentifiers({app: options.app, identifiers, environmentType: 'production'}),\n    }\n  } else {\n    identifiers = envIdentifiers as Identifiers\n    partnersApp = await fetchAppFromApiKey(identifiers.app, token)\n  }\n\n  return {\n    app: options.app,\n    partnersApp: {\n      id: partnersApp.id,\n      title: partnersApp.title,\n      appType: partnersApp.appType,\n    },\n    identifiers,\n  }\n}\n\nfunction getAreIdentifiersMissing(app: App, identifiers: Partial<Identifiers>): boolean {\n  const appIdMissing = identifiers.app === undefined\n\n  const anyExtensionMissingId = (extensions: Extension[]): boolean => {\n    return extensions.every((extension) => {\n      return (identifiers?.extensions ?? {})[extension.localIdentifier] !== undefined\n    })\n  }\n  const anyExtensionIdMissing =\n    anyExtensionMissingId(app.extensions.ui) ||\n    anyExtensionMissingId(app.extensions.theme) ||\n    anyExtensionMissingId(app.extensions.function)\n\n  return appIdMissing || anyExtensionIdMissing\n}\n\nasync function fetchOrgsAppsAndStores(orgId: string, token: string): Promise<FetchResponse> {\n  let data = {} as FetchResponse\n  const list = new ui.Listr(\n    [\n      {\n        title: 'Fetching organization data',\n        task: async () => {\n          const responses = await Promise.all([fetchOrgAndApps(orgId, token), fetchAllStores(orgId, token)])\n          data = {...responses[0], stores: responses[1]} as FetchResponse\n          // We need ALL stores so we can validate the selected one.\n          // This is a temporary workaround until we have an endpoint to fetch only 1 store to validate.\n        },\n      },\n    ],\n    {rendererSilent: environment.local.isUnitTest()},\n  )\n  await list.run()\n  return data\n}\n\n/**\n * Any data sent via input flags takes precedence and needs to be validated.\n * If any of the inputs is invalid, we must throw an error and stop the execution.\n * @param input\n * @returns\n */\nasync function dataFromInput(\n  options: DevEnvironmentOptions,\n  org: Organization,\n  stores: OrganizationStore[],\n  token: string,\n): Promise<{app?: OrganizationApp; store?: string}> {\n  let selectedApp: OrganizationApp | undefined\n  let selectedStore: string | undefined\n\n  if (options.apiKey) {\n    selectedApp = await fetchAppFromApiKey(options.apiKey, token)\n    if (!selectedApp) throw InvalidApiKeyError(options.apiKey)\n  }\n\n  if (options.store) {\n    await convertToTestStoreIfNeeded(options.store, stores, org, token)\n    selectedStore = options.store\n  }\n\n  return {app: selectedApp, store: selectedStore}\n}\n\n/**\n * Retrieve cached info from the global configuration based on the current local app\n * @param reset {boolean} Wheter to reset the cache or not\n * @param directory {string} The directory containing the app.\n * @param appId {string} Current local app id, used to retrieve the cached info\n * @returns\n */\nfunction getAppDevCachedInfo({\n  reset,\n  directory,\n  apiKey,\n}: {\n  reset: boolean\n  directory: string\n  apiKey?: string\n}): conf.CachedAppInfo | undefined {\n  if (!apiKey) return undefined\n  if (apiKey && reset) conf.clearAppInfo(directory)\n  return conf.getAppInfo(directory)\n}\n\n/**\n * Fetch all orgs the user belongs to and show a prompt to select one of them\n * @param token {string} Token to access partners API\n * @returns {Promise<string>} The selected organization ID\n */\nasync function selectOrg(token: string): Promise<string> {\n  const orgs = await fetchOrganizations(token)\n  const org = await selectOrganizationPrompt(orgs)\n  return org.id\n}\n\n/**\n * Message shown to the user in case we are reusing a previous configuration\n * @param org {string} Organization name\n * @param app {string} App name\n * @param store {string} Store domain\n */\nfunction showReusedValues(org: string, app: App, store: string) {\n  output.info('\\nUsing your previous dev settings:')\n  output.info(`Org:        ${org}`)\n  output.info(`App:        ${app.name}`)\n  output.info(`Dev store:  ${store}\\n`)\n  output.info(\n    output.content`To reset your default dev config, run ${output.token.command(\n      app.dependencyManager,\n      'dev',\n      '--reset',\n    )}\\n`,\n  )\n}\n"],"names":["conf"],"mappings":"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"}