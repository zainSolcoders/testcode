import { v as versions, e as environmentVariables } from './app-e1e50846.js';
import { os, file, path, http, checksum, error, constants, environment, system } from '@shopify/cli-kit';
import zlib from 'node:zlib';
import { createWriteStream } from 'node:fs';
import { pipeline } from 'node:stream';
import { promisify } from 'node:util';
import { fileURLToPath } from 'url';

const SUPPORTED_SYSTEMS = ["darwin amd64", "darwin arm64", "linux 386", "linux amd64", "windows 386", "windows amd64"];
const RELEASE_DOWNLOADS_URL = "https://github.com/Shopify/shopify-cli-extensions/releases/download";
const UnsupportedPlatformError = ({ platform, arch }) => {
  return new error.Abort(`The current platform ${platform} and architecture ${arch} are not supported for extensions development.`);
};
async function getBinaryPathOrDownload() {
  const binaryLocalPath = await getBinaryLocalPath();
  if (await binaryExists()) {
    return binaryLocalPath;
  }
  const { platform, arch } = os.platformAndArch();
  validatePlatformSupport({ platform, arch });
  let artifact = `shopify-extensions-${platform}-${arch}`;
  if (platform === "windows")
    artifact += ".exe";
  return file.inTemporaryDirectory(async (tmpDir) => {
    const outputBinary = await download({ into: tmpDir, artifact });
    await file.mkdir(path.join(path.dirname(outputBinary)));
    await file.move(outputBinary, binaryLocalPath, { overwrite: true });
    await file.chmod(binaryLocalPath, 493);
    return binaryLocalPath;
  });
}
async function download({ into, artifact }) {
  const assetDownloadUrl = getReleaseArtifactURL({
    name: artifact,
    extension: "gz"
  });
  const response = await http.fetch(assetDownloadUrl);
  const outputBinary = path.join(into, artifact);
  await promisify(pipeline)(response.body, zlib.createGunzip(), createWriteStream(outputBinary));
  const md5DownloadUrl = getReleaseArtifactURL({
    name: artifact,
    extension: "md5"
  });
  await checksum.validateMD5({ file: outputBinary, md5FileURL: md5DownloadUrl });
  return outputBinary;
}
function getReleaseArtifactURL({ name, extension }) {
  return `${RELEASE_DOWNLOADS_URL}/${versions.extensionsBinary}/${name}.${extension}`;
}
function validatePlatformSupport({ platform, arch }) {
  if (!SUPPORTED_SYSTEMS.includes(`${platform} ${arch}`)) {
    throw UnsupportedPlatformError({
      platform,
      arch
    });
  }
}
async function binaryExists() {
  const binaryPath = await getBinaryLocalPath();
  return file.exists(binaryPath);
}
async function getBinaryLocalPath() {
  const { platform, arch } = os.platformAndArch();
  const binariesDirectory = constants.paths.directories.cache.vendor.binaries();
  const extensionsDirectory = path.join(binariesDirectory, "extensions");
  let binaryName = `${versions.extensionsBinary}-${platform}-${arch}`;
  if (platform === "windows") {
    binaryName += ".exe";
  }
  return path.join(extensionsDirectory, binaryName);
}

function useExtensionsCLISources(env = process.env) {
  return environment.utilities.isTruthy(env[environmentVariables.useExtensionsCLISources]);
}

let building = false;
let built = false;
const NodeExtensionsCLINotFoundError = () => {
  return new error.Bug(`Couldn't find the shopify-cli-extensions Node binary`);
};
async function runGoExtensionsCLI(args, options = {}) {
  const stdout = options.stdout || { write: () => {
  } };
  if (useExtensionsCLISources()) {
    const projectDirectory = path.join(environment.local.homeDirectory(), "src/github.com/shopify/shopify-cli-extensions");
    stdout.write(`Using extensions CLI from ${projectDirectory}`);
    try {
      if (building) {
        while (!built) {
          await new Promise((resolve) => setTimeout(resolve, 1e3));
        }
      } else {
        building = true;
        stdout.write("Building extensions CLI...");
        await system.exec("make", ["build"], {
          ...options,
          stdout: void 0,
          stderr: void 0,
          cwd: projectDirectory
        });
        built = true;
        stdout.write("Built extensions CLI successfully!");
      }
      await system.exec(path.join(projectDirectory, "shopify-extensions"), args, options);
    } catch {
      throw new error.AbortSilent();
    }
  } else {
    const binaryPath = await getBinaryPathOrDownload();
    await system.exec(binaryPath, [...args], options);
  }
}
async function nodeExtensionsCLIPath() {
  const cwd = path.dirname(fileURLToPath(import.meta.url));
  const executablePath = await path.findUp("node_modules/.bin/shopify-cli-extensions", { type: "file", cwd });
  if (!executablePath) {
    throw NodeExtensionsCLINotFoundError();
  }
  return executablePath;
}

export { nodeExtensionsCLIPath as n, runGoExtensionsCLI as r };
//# sourceMappingURL=cli-852b5950.js.map
