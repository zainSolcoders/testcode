{"version":3,"file":"app-e1e50846.js","sources":["../src/cli/flags.ts","../src/cli/constants.ts","../src/cli/models/app/app.ts"],"sourcesContent":["import {Flags} from '@oclif/core'\nimport {path} from '@shopify/cli-kit'\n\n/**\n * An object that contains the flags that\n * are shared across all the app commands.\n */\nexport const appFlags = {\n  path: Flags.string({\n    hidden: false,\n    description: 'The path to your app directory.',\n    parse: (input, _) => Promise.resolve(path.resolve(input)),\n    env: 'SHOPIFY_FLAG_PATH',\n  }),\n}\n","export const configurationFileNames = {\n  app: 'shopify.app.toml',\n  extension: {\n    ui: 'shopify.ui.extension.toml',\n    theme: 'shopify.theme.extension.toml',\n    function: 'shopify.function.extension.toml',\n  },\n  web: 'shopify.web.toml',\n} as const\n\nexport const dotEnvFileNames = {\n  production: '.env',\n}\n\nexport const environmentVariables = {\n  /**\n   * Environment variable to instructs the CLI on running the extensions' CLI through its sources.\n   */\n  useExtensionsCLISources: 'SHOPIFY_USE_EXTENSIONS_CLI_SOURCES',\n} as const\n\nexport const versions = {\n  extensionsBinary: 'v0.13.0',\n} as const\n\nexport const blocks = {\n  extensions: {\n    directoryName: 'extensions',\n    configurationName: configurationFileNames.extension,\n  },\n  functions: {\n    defaultUrl: 'https://github.com/Shopify/scripts-apis-examples',\n    defaultLanguage: 'wasm',\n  },\n  web: {\n    directoryName: 'web',\n    configurationName: configurationFileNames.web,\n  },\n} as const\n\n/**\n * List of extensions for each category that are limited by quantity, only 1 of each is allowed per app\n */\nexport const limitedExtensions: {\n  ui: UIExtensionTypes[]\n  theme: ThemeExtensionTypes[]\n  function: FunctionExtensionTypes[]\n} = {\n  ui: ['product_subscription', 'checkout_post_purchase'],\n  theme: ['theme'],\n  function: [],\n}\n\nexport const genericConfigurationFileNames = {\n  yarn: {\n    lockfile: 'yarn.lock',\n  },\n  pnpm: {\n    lockfile: 'pnpm-lock.yaml',\n  },\n} as const\n\nexport const functionExtensions = {\n  types: ['product_discounts', 'order_discounts', 'shipping_discounts', 'payment_methods', 'shipping_rate_presenter'],\n} as const\n\nexport type FunctionExtensionTypes = typeof functionExtensions.types[number]\n\nexport const uiExtensions = {\n  types: ['product_subscription', 'checkout_ui_extension', 'checkout_post_purchase', 'beacon_extension'],\n} as const\n\nexport type UIExtensionTypes = typeof uiExtensions.types[number]\n\nexport const themeExtensions = {\n  types: ['theme'],\n} as const\n\nexport type ThemeExtensionTypes = typeof themeExtensions.types[number]\n\nexport const extensions = {\n  types: [...themeExtensions.types, ...uiExtensions.types, ...functionExtensions.types],\n}\n\nexport type ExtensionTypes = typeof extensions.types[number]\n\nexport function extensionTypeCategory(extensionType: ExtensionTypes): 'theme' | 'function' | 'ui' {\n  if (extensionType === 'theme') {\n    return 'theme'\n  }\n  if ((functionExtensions.types as ReadonlyArray<string>).includes(extensionType)) {\n    return 'function'\n  }\n  return 'ui'\n}\n\n/**\n * Returns the runtime renderer dependency for a given UI extension type.\n * @param extensionType {UIExtensionTypes} Extension type.\n * @returns The renderer dependency that should be present in the app's package.json\n */\nexport function getUIExtensionRendererDependency(extensionType: UIExtensionTypes): string | undefined {\n  switch (extensionType) {\n    case 'product_subscription':\n      return '@shopify/admin-ui-extensions-react'\n    case 'checkout_ui_extension':\n      return '@shopify/checkout-ui-extensions-react'\n    case 'checkout_post_purchase':\n      return '@shopify/post-purchase-ui-extensions-react'\n    case 'beacon_extension':\n      return undefined\n  }\n}\n","import {\n  blocks,\n  configurationFileNames,\n  genericConfigurationFileNames,\n  functionExtensions,\n  themeExtensions,\n  uiExtensions,\n  getUIExtensionRendererDependency,\n  UIExtensionTypes,\n  dotEnvFileNames,\n} from '../../constants'\nimport {dependency, dotenv, error, file, path, schema, string, toml} from '@shopify/cli-kit'\n\nexport const WebConfigurationFileNotFound = (directory: string) => {\n  return new error.Abort(`Couldn't find ${configurationFileNames.web} in ${directory}`)\n}\n\nexport interface Identifiers {\n  /** Application's API Key */\n  app: string\n\n  /**\n   * The extensions' unique identifiers.\n   */\n  extensions: {\n    [localIdentifier: string]: string\n  }\n}\n\nexport const AppConfigurationSchema = schema.define.object({\n  scopes: schema.define.string().default(''),\n})\n\nexport type AppConfiguration = schema.define.infer<typeof AppConfigurationSchema>\n\nconst UIExtensionConfigurationSchema = schema.define.object({\n  name: schema.define.string(),\n  type: schema.define.enum(uiExtensions.types),\n  metafields: schema.define\n    .array(\n      schema.define.object({\n        namespace: schema.define.string(),\n        key: schema.define.string(),\n      }),\n    )\n    .default([]),\n})\n\ntype UIExtensionConfiguration = schema.define.infer<typeof UIExtensionConfigurationSchema>\n\nconst FunctionExtensionConfigurationSchema = schema.define.object({\n  name: schema.define.string(),\n  type: schema.define.enum(functionExtensions.types),\n  title: schema.define.string(),\n})\n\ntype FunctionExtensionConfiguration = schema.define.infer<typeof FunctionExtensionConfigurationSchema>\n\nconst ThemeExtensionConfigurationSchema = schema.define.object({\n  name: schema.define.string(),\n  type: schema.define.enum(themeExtensions.types),\n})\n\ntype ThemeExtensionConfiguration = schema.define.infer<typeof ThemeExtensionConfigurationSchema>\n\nexport interface Extension {\n  idEnvironmentVariableName: string\n  localIdentifier: string\n  configurationPath: string\n  directory: string\n}\n\nexport type FunctionExtension = Extension & {\n  configuration: FunctionExtensionConfiguration\n}\n\nexport type ThemeExtension = Extension & {\n  configuration: ThemeExtensionConfiguration\n}\n\nexport type UIExtension = Extension & {\n  configuration: UIExtensionConfiguration\n  buildDirectory: string\n  entrySourceFilePath: string\n}\n\nexport enum WebType {\n  Frontend = 'frontend',\n  Backend = 'backend',\n}\n\nexport const WebConfigurationSchema = schema.define.object({\n  type: schema.define.enum([WebType.Frontend, WebType.Backend]),\n  commands: schema.define.object({\n    build: schema.define.string().optional(),\n    dev: schema.define.string(),\n  }),\n})\n\nexport type WebConfiguration = schema.define.infer<typeof WebConfigurationSchema>\nexport type WebConfigurationCommands = keyof WebConfiguration['commands']\n\nexport interface Web {\n  directory: string\n  configuration: WebConfiguration\n}\n\nexport interface AppEnvironment {\n  dotenv: {\n    production?: dotenv.DotEnvFile\n  }\n  env: {[key: string]: string}\n}\n\nexport interface App {\n  name: string\n  idEnvironmentVariableName: string\n  directory: string\n  dependencyManager: dependency.DependencyManager\n  configuration: AppConfiguration\n  configurationPath: string\n  nodeDependencies: {[key: string]: string}\n  webs: Web[]\n  environment: AppEnvironment\n  extensions: {\n    ui: UIExtension[]\n    theme: ThemeExtension[]\n    function: FunctionExtension[]\n  }\n  errors?: AppErrors\n}\n\nexport type AppLoaderMode = 'strict' | 'report'\n\ninterface AppLoaderConstructorArgs {\n  directory: string\n  mode: AppLoaderMode\n}\n\nclass AppErrors {\n  private errors: {\n    [key: string]: string\n  } = {}\n\n  addError(path: string, message: string): void {\n    this.errors[path] = message\n  }\n\n  getError(path: string): string {\n    return this.errors[path]\n  }\n\n  isEmpty() {\n    return Object.keys(this.errors).length === 0\n  }\n\n  toJSON(): string[] {\n    return Object.values(this.errors)\n  }\n}\n\nclass AppLoader {\n  private directory: string\n  private mode: AppLoaderMode\n  private appDirectory = ''\n  private configurationPath = ''\n  private errors: AppErrors = new AppErrors()\n\n  constructor({directory, mode}: AppLoaderConstructorArgs) {\n    this.mode = mode\n    this.directory = directory\n  }\n\n  async loaded() {\n    this.appDirectory = await this.findAppDirectory()\n    const configurationPath = await this.getConfigurationPath()\n    const configuration = await this.parseConfigurationFile(AppConfigurationSchema, configurationPath)\n    const extensionsPath = path.join(this.appDirectory, `${blocks.extensions.directoryName}`)\n    const environment = await this.loadEnvironment()\n    const functions = await this.loadFunctions(extensionsPath)\n    const uiExtensions = await this.loadUIExtensions(extensionsPath)\n    const themeExtensions = await this.loadThemeExtensions(extensionsPath)\n    const yarnLockPath = path.join(this.appDirectory, genericConfigurationFileNames.yarn.lockfile)\n    const yarnLockExists = await file.exists(yarnLockPath)\n    const pnpmLockPath = path.join(this.appDirectory, genericConfigurationFileNames.pnpm.lockfile)\n    const pnpmLockExists = await file.exists(pnpmLockPath)\n    const packageJSONPath = path.join(this.appDirectory, 'package.json')\n    const name = await dependency.getPackageName(packageJSONPath)\n    const nodeDependencies = await dependency.getDependencies(packageJSONPath)\n    let dependencyManager: dependency.DependencyManager\n    if (yarnLockExists) {\n      dependencyManager = 'yarn'\n    } else if (pnpmLockExists) {\n      dependencyManager = 'pnpm'\n    } else {\n      dependencyManager = 'npm'\n    }\n\n    const app: App = {\n      name,\n      idEnvironmentVariableName: 'SHOPIFY_APP_API_KEY',\n      directory: this.appDirectory,\n      webs: await this.loadWebs(),\n      configuration,\n      configurationPath,\n      environment,\n      extensions: {ui: uiExtensions, theme: themeExtensions, function: functions},\n      dependencyManager,\n      nodeDependencies,\n    }\n    if (!this.errors.isEmpty()) app.errors = this.errors\n    return app\n  }\n\n  async loadEnvironment(systemEnv: {[key: string]: string | undefined} = process.env): Promise<AppEnvironment> {\n    const env = Object.fromEntries(\n      Object.entries(systemEnv).filter(([key, value]) => {\n        return key.startsWith('SHOPIFY_') && value\n      }),\n    ) as {[key: string]: string}\n\n    let productionEnv: dotenv.DotEnvFile | undefined\n    const productionEnvPath = path.join(this.appDirectory, dotEnvFileNames.production)\n    if (await file.exists(productionEnvPath)) {\n      productionEnv = await dotenv.read(productionEnvPath)\n    }\n    return {\n      dotenv: {\n        production: productionEnv,\n      },\n      env,\n    }\n  }\n\n  async findAppDirectory() {\n    if (!(await file.exists(this.directory))) {\n      throw new error.Abort(`Couldn't find directory ${this.directory}`)\n    }\n    return path.dirname(await this.getConfigurationPath())\n  }\n\n  async getConfigurationPath() {\n    if (this.configurationPath) return this.configurationPath\n\n    const configurationPath = await path.findUp(configurationFileNames.app, {\n      cwd: this.directory,\n      type: 'file',\n    })\n    if (!configurationPath) {\n      throw new error.Abort(`Couldn't find the configuration file for ${this.directory}, are you in an app directory?`)\n    }\n\n    this.configurationPath = configurationPath\n    return configurationPath\n  }\n\n  async loadWebs(): Promise<Web[]> {\n    const webTomlPaths = await path.glob(path.join(this.appDirectory, `**/${configurationFileNames.web}`))\n\n    if (webTomlPaths.length === 0) {\n      throw WebConfigurationFileNotFound(this.appDirectory)\n    }\n\n    const webs = await Promise.all(webTomlPaths.map((path) => this.loadWeb(path)))\n\n    return webs\n  }\n\n  async loadWeb(WebConfigurationFile: string): Promise<Web> {\n    return {\n      directory: path.dirname(WebConfigurationFile),\n      configuration: await this.parseConfigurationFile(WebConfigurationSchema, WebConfigurationFile),\n    }\n  }\n\n  async loadConfigurationFile(path: string): Promise<unknown> {\n    if (!(await file.exists(path))) {\n      return this.abortOrReport(`Couldn't find the configuration file at ${path}`, '', path)\n    }\n    const configurationContent = await file.read(path)\n    // Convert snake_case keys to camelCase before returning\n    return {\n      ...Object.fromEntries(\n        Object.entries(toml.decode(configurationContent)).map((kv) => [string.camelize(kv[0]), kv[1]]),\n      ),\n    }\n  }\n\n  async parseConfigurationFile<TSchema extends schema.define.ZodType>(\n    schema: TSchema,\n    path: string,\n  ): Promise<schema.define.TypeOf<TSchema>> {\n    const fallbackOutput = {} as schema.define.TypeOf<TSchema>\n\n    const configurationObject = await this.loadConfigurationFile(path)\n    if (!configurationObject) return fallbackOutput\n\n    const parseResult = schema.safeParse(configurationObject)\n    if (!parseResult.success) {\n      return this.abortOrReport(\n        `Invalid schema in ${path}:\\n${JSON.stringify(parseResult.error.issues, null, 2)}`,\n        fallbackOutput,\n        path,\n      )\n    }\n    return parseResult.data\n  }\n\n  async loadUIExtensions(extensionsPath: string): Promise<UIExtension[]> {\n    const extensionConfigPaths = path.join(extensionsPath, `*/${configurationFileNames.extension.ui}`)\n    const configPaths = await path.glob(extensionConfigPaths)\n\n    const extensions = configPaths.map(async (configurationPath) => {\n      const directory = path.dirname(configurationPath)\n      const configuration = await this.parseConfigurationFile(UIExtensionConfigurationSchema, configurationPath)\n      return {\n        idEnvironmentVariableName: `SHOPIFY_${string.constantize(path.basename(directory))}_ID`,\n        directory,\n        configuration,\n        configurationPath,\n        buildDirectory: path.join(directory, 'build'),\n        entrySourceFilePath: path.join(directory, 'src/index.js'),\n        localIdentifier: path.basename(directory),\n      }\n    })\n    return Promise.all(extensions)\n  }\n\n  async loadFunctions(extensionsPath: string): Promise<FunctionExtension[]> {\n    const functionConfigPaths = await path.join(extensionsPath, `*/${configurationFileNames.extension.function}`)\n    const configPaths = await path.glob(functionConfigPaths)\n\n    const functions = configPaths.map(async (configurationPath) => {\n      const directory = path.dirname(configurationPath)\n      const configuration = await this.parseConfigurationFile(FunctionExtensionConfigurationSchema, configurationPath)\n      return {\n        directory,\n        configuration,\n        configurationPath,\n        idEnvironmentVariableName: `SHOPIFY_${string.constantize(path.basename(directory))}_ID`,\n        localIdentifier: path.basename(directory),\n      }\n    })\n    return Promise.all(functions)\n  }\n\n  async loadThemeExtensions(extensionsPath: string): Promise<ThemeExtension[]> {\n    const themeConfigPaths = await path.join(extensionsPath, `*/${configurationFileNames.extension.theme}`)\n    const configPaths = await path.glob(themeConfigPaths)\n\n    const themeExtensions = configPaths.map(async (configurationPath) => {\n      const directory = path.dirname(configurationPath)\n      const configuration = await this.parseConfigurationFile(ThemeExtensionConfigurationSchema, configurationPath)\n      return {\n        directory,\n        configuration,\n        configurationPath,\n        idEnvironmentVariableName: `SHOPIFY_${string.constantize(path.basename(directory))}_ID`,\n        localIdentifier: path.basename(directory),\n      }\n    })\n    return Promise.all(themeExtensions)\n  }\n\n  abortOrReport<T>(errorMessage: string, fallback: T, configurationPath: string): T {\n    if (this.mode === 'strict') {\n      throw new error.Abort(errorMessage)\n    } else {\n      this.errors.addError(configurationPath, errorMessage)\n      return fallback\n    }\n  }\n}\n\n/**\n * Reads the dependencies from the app's package.json and creates a copy\n * of the app with the list of dependencies updated.\n * @param app {App} App whose Node dependencies will be updated.\n * @returns {Promise<App>} The app with the Node dependencies updated.\n */\nexport async function updateDependencies(app: App): Promise<App> {\n  const nodeDependencies = await dependency.getDependencies(path.join(app.directory, 'package.json'))\n  return {\n    ...app,\n    nodeDependencies,\n  }\n}\n\nexport type EnvironmentType = 'production'\n\ninterface UpdateAppIdentifiersOptions {\n  app: App\n  identifiers: Identifiers\n  environmentType: EnvironmentType\n}\n\n/**\n * Given an app and a set of identifiers, it persists the identifiers in the .env files.\n * @param options {UpdateAppIdentifiersOptions} Options.\n * @returns {App} An copy of the app with the environment updated to reflect the updated identifiers.\n */\nexport async function updateAppIdentifiers({\n  app,\n  identifiers,\n  environmentType,\n}: UpdateAppIdentifiersOptions): Promise<App> {\n  const envVariables = Object.keys(app.environment.env)\n  let dotenvFile = app.environment.dotenv.production\n  if (!dotenvFile) {\n    dotenvFile = {\n      path: path.join(app.directory, dotEnvFileNames.production),\n      variables: {},\n    }\n  }\n  const variables: {[key: string]: string} = {}\n  if (!envVariables.includes(app.idEnvironmentVariableName)) {\n    variables[app.idEnvironmentVariableName] = identifiers.app\n  }\n  Object.keys(identifiers.extensions).forEach((identifier) => {\n    const envVariable = `SHOPIFY_${string.constantize(identifier)}_ID`\n    if (!envVariables.includes(envVariable)) {\n      variables[envVariable] = identifiers.extensions[identifier]\n    }\n  })\n  const write = JSON.stringify(dotenvFile.variables) !== JSON.stringify(variables)\n  dotenvFile.variables = variables\n  if (write) {\n    await dotenv.write(dotenvFile)\n  }\n  return {\n    ...app,\n    environment: {\n      env: app.environment.env,\n      dotenv: {\n        production: dotenvFile,\n      },\n    },\n  }\n}\n\ninterface GetAppIdentifiersOptions {\n  app: App\n  environmentType: EnvironmentType\n}\n\n/**\n * Given an app and a environment, it fetches the ids from the environment\n * and returns them.\n * @param options {GetAppIdentifiersOptions} Options.\n * @returns\n */\nexport function getAppIdentifiers({app, environmentType}: GetAppIdentifiersOptions): Partial<Identifiers> {\n  const envVariables = {\n    ...app.environment.env,\n    ...app.environment.dotenv.production?.variables,\n  }\n  const extensionsIdentifiers: {[key: string]: string} = {}\n  const processExtension = (extension: Extension) => {\n    if (Object.keys(envVariables).includes(extension.idEnvironmentVariableName)) {\n      extensionsIdentifiers[extension.localIdentifier] = envVariables[extension.idEnvironmentVariableName]\n    }\n  }\n  app.extensions.ui.forEach(processExtension)\n  app.extensions.function.forEach(processExtension)\n  app.extensions.theme.forEach(processExtension)\n\n  return {\n    app: envVariables[app.idEnvironmentVariableName],\n    extensions: extensionsIdentifiers,\n  }\n}\n\n/**\n * Given a UI extension and the app it belongs to, it returns the version of the renderer\n * package.\n * @param uiExtensionType {UIExtensionTypes} UI extension whose renderer version will be obtained.\n * @param app {App} App object containing the extension.\n * @returns {{name: string; version: string} | undefined} The version if the dependency exists.\n */\nexport function getUIExtensionRendererVersion(\n  uiExtensionType: UIExtensionTypes,\n  app: App,\n): {name: string; version: string} | undefined {\n  const nodeDependencies = app.nodeDependencies\n  const rendererDependencyName = getUIExtensionRendererDependency(uiExtensionType)\n  if (!rendererDependencyName) {\n    return undefined\n  }\n  const rendererDependency = nodeDependencies[rendererDependencyName]\n  if (!rendererDependency) {\n    return undefined\n  }\n  return {name: rendererDependencyName, version: rendererDependency}\n}\n\nexport async function load(directory: string, mode: AppLoaderMode = 'strict'): Promise<App> {\n  const loader = new AppLoader({directory, mode})\n  return loader.loaded()\n}\n"],"names":[],"mappings":"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"}