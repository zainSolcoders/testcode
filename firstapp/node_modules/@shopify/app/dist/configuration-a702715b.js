import { n as nodeExtensionsCLIPath } from './cli-852b5950.js';
import { session, api, error, id, path } from '@shopify/cli-kit';
import { g as getUIExtensionRendererVersion } from './app-e1e50846.js';

const NoProductsError = (storeFqdn) => {
  return new error.Abort("Could not find a product variant", `Your store needs to have at least one product to test a "checkout_ui_extension",

You can add a new product here: https://${storeFqdn}/admin/products/new`);
};
async function fetchProductVariant(store) {
  const adminSession = await session.ensureAuthenticatedAdmin(store);
  const query = api.graphql.FindProductVariantQuery;
  const result = await api.admin.request(query, adminSession);
  const products = result.products.edges;
  if (products.length === 0)
    throw NoProductsError(store);
  const variantURL = result.products.edges[0].node.variants.edges[0].node.id;
  const variantId = variantURL.split("/").pop();
  return variantId;
}

const MissingStoreError = () => new error.Bug('You need a store to test "checkout_ui_extensions"');
async function extensionConfig(options) {
  const extensionsConfig = await Promise.all(options.extensions.map(async (extension) => {
    return {
      uuid: `${extension.configuration.name}-${id.generateShortId()}`,
      title: extension.configuration.name,
      type: `${extension.configuration.type}`,
      metafields: extension.configuration.metafields,
      extension_points: [],
      node_executable: await nodeExtensionsCLIPath(),
      development: {
        version: "1.0.0",
        root_dir: path.relative(options.app.directory, extension.directory),
        build_dir: options.buildDirectory ? path.relative(extension.directory, options.buildDirectory) : path.relative(extension.directory, extension.buildDirectory),
        entries: {
          main: path.relative(extension.directory, extension.entrySourceFilePath)
        },
        renderer: getUIExtensionRendererVersion(extension.configuration.type, options.app),
        resource: await getUIExtensionResourceURL(extension.configuration.type, options.storeFqdn)
      }
    };
  }));
  return {
    public_url: options.url,
    port: options.port,
    store: options.storeFqdn,
    app: {
      api_key: options.apiKey
    },
    extensions: extensionsConfig
  };
}
async function getUIExtensionResourceURL(uiExtensionType, store) {
  switch (uiExtensionType) {
    case "checkout_ui_extension": {
      if (!store)
        throw MissingStoreError();
      const result = await fetchProductVariant(store);
      return { url: `/cart/${result}:1` };
    }
    case "checkout_post_purchase":
    case "beacon_extension":
      return { url: "invalid_url" };
    case "product_subscription":
      return void 0;
  }
}

export { extensionConfig as e };
//# sourceMappingURL=configuration-a702715b.js.map
